package com.unlogical.linked.gui.panel;

import java.io.File;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;

import com.unlogical.linked.GameLauncher;
import com.unlogical.linked.filesystem.files.YAMLConfiguration;
import com.unlogical.linked.gui.InputChangeListener;
import com.unlogical.linked.gui.UserInputLine;
import com.unlogical.linked.gui.button.Button;
import com.unlogical.linked.gui.menu.MenuDisplay;
import com.unlogical.linked.level.Level;
import com.unlogical.linked.mapeditor.MapEditor;

public class RenamePanel extends GUIPanel
{	
	private Level level;
	private UserInputLine name;
	private Button cancelButton;
	private Button applyButton;
	
	public RenamePanel(float xOffset, float yOffset, float width, float height)
	{
		super("Rename Level", xOffset, yOffset, width, height);

		this.fillColor = new Color(MapEditor.panelColor);

		int lineHeight = 30;
		int inputWidth = (int) (width / 2) + 15;
		int currentOffset = (int) (yOffset + 10);
		int inputX = (int) (xOffset + width / 2) - 20;
		
		name = new UserInputLine(inputX, currentOffset, inputWidth, lineHeight);
		name.addInputChangedListener(new InputChangeListener()
		{
			@Override
			public void onInputChanged()
			{

			}
		});
		name.setActive(true);
		name.setAllowSpecialCharacters(true);
		name.setOnlyNumeric(false);

		currentOffset += name.getHeight() + 10;
		
		this.cancelButton = new Button("Cancel", (int) (xOffset), (int) (currentOffset + height), (int) (width / 2), 40)
		{
			@Override
			public void onClick()
			{
				disable();
			}
		};

		this.applyButton = new Button("Apply", (int) (xOffset + width / 2), (int) (currentOffset + height), (int) (width / 2), 40)
		{
			@Override
			public void onClick()
			{
				if (!name.getInput().isEmpty())
				{
					YAMLConfiguration cfg = new YAMLConfiguration(new File(Level.getMapPathByID(level.getID()) + "/config.yml"));
	
					cfg.set("name", name.getInput());					
					
					MapEditor.saveItAll();
					MapEditor.initMap(level.getID(), Level.getMapPathByID(level.getID())); //TODO: don't be that lazy
					MapEditor.adjustCameraOffset(GameLauncher.getContainer(), level.getCameraOffset().x, level.getCameraOffset().y);
					MenuDisplay.refreshLevels();
					
					disable();
				}
			}
		};

		this.setHeight(currentOffset - yOffset + this.applyButton.getHeight() + 30);
	}

	public void init(Level level)
	{
		this.level = level;
		
		name.setInput(level.getName());
	}
	
	@Override
	protected void customUpdate(GameContainer container, int delta)
	{
		name.update(container, delta);
		cancelButton.update(container, delta);
		applyButton.update(container, delta);
	}
	
	@Override
	protected void customRender(GameContainer container, float alphaFactor, Graphics g)
	{
		name.render(container, alphaFactor, g);
		cancelButton.render(container, alphaFactor, g);
		applyButton.render(container, alphaFactor, g);
		
		g.drawString("New Name", xOffset + 5, name.getCenterY() - g.getFont().getLineHeight() / 2);
	}
	
	@Override
	public void onPositionUpdate(int xChange, int yChange)
	{
		name.adjust(xChange, yChange);
		cancelButton.adjust(xChange, yChange);
		applyButton.adjust(xChange, yChange);
	}
}
