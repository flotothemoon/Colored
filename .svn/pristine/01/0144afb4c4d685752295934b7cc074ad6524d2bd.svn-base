package com.unlogical.colored.gui.menu;

import java.io.IOException;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.unlogical.colored.GameLauncher;
import com.unlogical.colored.gui.button.Button;
import com.unlogical.colored.input.InputAction;
import com.unlogical.colored.input.InputHandler;
import com.unlogical.colored.resources.font.Fonts;
import com.unlogical.colored.resources.image.Images;
import com.unlogical.colored.sound.Sounds;
import com.unlogical.colored.util.ColorHelper;
import com.unlogical.colored.util.CursorType;
import com.unlogical.colored.util.Renderer;
import com.unlogical.colored.util.ShaderHandler;

public abstract class Menu
{
	public static final float UNSELECTED_ALPHA = 0.8f;
	public static final float SELECTED_ALPHA = 1.0f;

	public static final Color UNSELECTED_COLOR = new Color(0.8f, 0.8f, 0.8f, UNSELECTED_ALPHA);
	public static final Color SELECTION_COLOR = new Color(1.0f, 1.0f, 1.0f, SELECTED_ALPHA);

	protected final MenuItem[] options;

	private boolean active;
	private boolean selecting = true;
	protected boolean ignoreButtons;

	private final int CLICK_COOLDOWN = 500;

	private int selectedOption;
	private int clickCooldown;
	private int height;

	protected float width;

	private float xOffset;
	private float yOffset;
	private float offset;

	public Menu(final String[] options, float xOffset, float yOffset, float width, float offset, boolean centered)
	{
		this.xOffset = xOffset;
		this.yOffset = yOffset;
		this.offset = offset;

		this.width = width;
		this.options = new MenuItem[options.length];

		for (int i = 0; i < options.length; i++)
		{
			try
			{
				Images.registerAndLoad(Images.toIdentifier(options[i]));
			}
			catch (IOException e)
			{
				throw new RuntimeException("Exception while loading icon: " + this.options[i], e);
			}

			this.options[i] = new MenuItem(Images.toIdentifier(options[i]), centered ? GameLauncher.getWidth() / 2 : xOffset, yOffset + i * offset);
		}

		this.height = (int) (this.options[this.options.length - 1].centerY + this.options[this.options.length - 1].getHeight() / 2 - this.options[0].centerY - this.options[0].getHeight() / 2);
	}

	public void update(int delta)
	{
		clickCooldown -= delta;

		for (int i = 0; i < options.length; i++)
		{
			if (options[i].contains(InputHandler.getCurrentInputX(), InputHandler.getCurrentInputY()) && !ignoreButtons)
			{
				selectedOption = i;
				selecting = true;

				CursorType.useCursor(CursorType.GRAB);
			}
		}

		if (!ignoreButtons)
		{
			if (InputHandler.isKeyJustPressed(InputAction.MOVE_DOWN))
			{
				selectedOption++;
				if (selectedOption == options.length)
				{
					selectedOption = 0;
				}

				selecting = true;
			}

			if (InputHandler.isKeyJustPressed(InputAction.MOVE_UP))
			{
				selectedOption--;
				if (selectedOption < 0)
				{
					selectedOption = options.length - 1;
				}

				selecting = true;
			}
		}

		if (isAvailable(selectedOption))
		{
			if (InputHandler.isKeyJustPressed(InputAction.BACK) && !(this instanceof MainMenu))
			{
				onSelect(options.length - 1);
				Sounds.play("click");
			}

			if (((Gdx.input.isKeyJustPressed(Input.Keys.ENTER) || InputHandler.isKeyJustPressed(InputAction.JUMP) || (this.options[selectedOption].contains(InputHandler.getCurrentInputX(), InputHandler.getCurrentInputY()) && Gdx.input.isButtonPressed(Input.Buttons.LEFT) && Gdx.input.justTouched()) && clickCooldown <= 0)) && selecting)
			{
				onSelect(selectedOption);
				Sounds.play("click");
				clickCooldown = CLICK_COOLDOWN;
			}
		}

		for (int i = 0; i < options.length; i++)
		{
			if (i == selectedOption)
			{
				options[i].scale += (isAvailable(i) ? Button.WOBBLE_AVAILABLE_SPEED : Button.WOBBLE_UNAVAILABLE_SPEED) * delta * (options[i].addingScale ? 1.0f : -1.0f);

				if (options[i].scale > (isAvailable(i) ? Button.WOBBLE_AVAILABLE_MAX_SCALE_FACTOR : Button.WOBBLE_UNAVAILABLE_MAX_SCALE_FACTOR))
				{
					options[i].addingScale = false;
				}
				else if (options[i].scale < (isAvailable(i) ? Button.WOBBLE_AVAILABLE_MIN_SCALE_FACTOR : Button.WOBBLE_UNAVAILABLE_MIN_SCALE_FACTOR))
				{
					options[i].addingScale = true;
				}
			}
			else if (options[i].scale != 1.0f)
			{
				options[i].scale = (options[i].scale - 1.0f) * (isAvailable(i) ? Button.WOBBLE_AVAILABLE_SLOW_DOWN_FACTOR : Button.WOBBLE_UNAVAILABLE_SLOW_DOWN_FACTOR) + 1.0f;
			}
		}

		customUpdate(delta);
	}

	public void render(Batch batch)
	{
		if (active)
		{
			ShaderHandler.disableLighting();

			for (int i = 0; i < options.length; i++)
			{
				Renderer.setFont(Fonts.getDefaultFont());

				Color color = isAvailable(i) ? Color.WHITE : ColorHelper.applyAlphaAndCopy(Color.GRAY, 0.3f);

				Images.draw(options[i].item, options[i].centerX, options[i].centerY, options[i].scale, 0.0f, color, batch);

				customOptionRender(batch, i, options[i]);
			}

			customRender(batch);

			ShaderHandler.enableLighting();
		}
	}

	protected boolean isAvailable(int option)
	{
		return option >= 0 && option < options.length;
	}

	protected void customOptionRender(Batch batch, int option, MenuItem box)
	{

	}

	public int getHeight()
	{
		return height;
	}

	public abstract void onSelect(int selection);

	public boolean isActive()
	{
		return this.active;
	}

	public void setActive(boolean b)
	{
		this.active = b;
	}

	public float getY()
	{
		return yOffset;
	}

	public float getY(int option)
	{
		return options[option].centerY;
	}

	public void setyOffset(float yOffset)
	{
		this.yOffset = yOffset;
	}

	public float getOffset()
	{
		return offset;
	}

	public void setOffset(float offset)
	{
		this.offset = offset;
	}

	public float getXOffset()
	{
		return xOffset;
	}

	public void customUpdate(int delta)
	{
	}

	public void customRender(Batch batch)
	{
	}

	public int getSelectedOption()
	{
		return selectedOption;
	}

	public void setSelectedOption(int selectedOption)
	{
		this.selectedOption = selectedOption;
	}

	public float getWidth()
	{
		return width;
	}

	protected static class MenuItem
	{
		private float centerX;
		private float centerY;

		private float scale = 1.0f;

		private boolean addingScale;

		private String item;

		public MenuItem(String item, float centerX, float centerY)
		{
			this.item = item;
			this.centerX = centerX;
			this.centerY = centerY;
		}

		public float getCenterX()
		{
			return centerX;
		}

		public float getCenterY()
		{
			return centerY;
		}

		public boolean contains(float x, float y)
		{
			float hWidth = getWidth() / 2;
			float hHeight = getHeight() / 2;

			return x > centerX - hWidth && x < centerX + hWidth && y > centerY - hHeight && y < centerY + hHeight;
		}

		public float getHeight()
		{
			return Images.getHandler(item).getImage().getRegionHeight() * scale;
		}

		public float getWidth()
		{
			return Images.getHandler(item).getImage().getRegionWidth() * scale;
		}

		public float getScale()
		{
			return scale;
		}

		public String getItem()
		{
			return item;
		}
	}
}
