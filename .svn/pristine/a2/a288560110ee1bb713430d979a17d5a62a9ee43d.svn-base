package com.unlogical.linked.saving;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.unlogical.linked.debug.Debug;
import com.unlogical.linked.filesystem.FilePaths;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;

public class SaveState
{
	private static final String GROUP_START = "====";
	private static final String GROUP_END = "==|==";
	private static final String ITEM_START = "--";
	private static final String ITEM_END = "-|-";

	private File file;
	private String saveID;

	private InformationPool publicInformation = new InformationPool();
	private Map<String, InformationPool> perLevelInformation = new HashMap<String, InformationPool>();
	private Map<String, InformationPool> perWorldInformation = new HashMap<String, InformationPool>();

	public SaveState(String saveID) throws IOException
	{
		file = new File(FilePaths.SAVES + "/" + saveID + ".dat");
	}

	public void readAll() throws IOException
	{
		CSVReader reader = new CSVReader(new FileReader(file));

		publicInformation = (InformationPool) readGroup(reader).values().toArray()[0];
		perLevelInformation = readGroup(reader);
		perWorldInformation = readGroup(reader);
	}

	@SuppressWarnings("serial")
	public void writeAll() throws IOException
	{
		CSVWriter writer = new CSVWriter(new FileWriter(file));

		if (!file.exists())
		{
			Debug.log("Created " + file.getPath() + " to save for saveID " + saveID + ".");

			file.createNewFile();
		}

		writeGroup(new HashMap<String, InformationPool>()
		{
			{
				put("global", publicInformation);
			}
		}, writer);
		
		
	}

	private void writeGroup(HashMap<String, InformationPool> poolMap, CSVWriter writer)
	{
		write(writer, GROUP_START);
		
		for (String key : poolMap.keySet())
		{
			InformationPool pool = poolMap.get(key);
			
			write(writer, ITEM_START, key);
			
			Map<Object, Object[]> map = pool.getStoredInformation();
			
			for (Object object : map.keySet())
			{
//				write(writer, map.get(object)); 
			}
			
			write(writer, ITEM_END);
		}
		
		write(writer, GROUP_END);
	}
	
	private void write(CSVWriter writer, String... line)
	{
		writer.writeNext(line);
	}

	private Map<String, InformationPool> readGroup(CSVReader reader) throws IOException
	{
		Map<String, InformationPool> poolMap = new HashMap<String, InformationPool>();
		InformationPool currentPool = null;

		String[] line = null;
		while ((line = reader.readNext()) != null)
		{
			if (line[0].equals(GROUP_END))
			{
				break;
			}

			if (!line[0].equals(GROUP_START))
			{
				if (line[0].equals(ITEM_START))
				{
					currentPool = new InformationPool();
					poolMap.put(line[1], currentPool);
				}
				else if (!line[0].equals(ITEM_END))
				{
					currentPool.put(line[0], Arrays.asList(line).subList(1, line.length).toArray());
				}
			}
		}

		return poolMap;
	}
}
