package com.unlogical.colored.gui.panel;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.geom.Vector2f;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;

import com.unlogical.colored.GameLauncher;
import com.unlogical.colored.debug.Debug;
import com.unlogical.colored.filesystem.FilePaths;
import com.unlogical.colored.gui.UserInputLine;
import com.unlogical.colored.gui.button.Button;
import com.unlogical.colored.gui.menu.Menu;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.mapeditor.MapEditor;
import com.unlogical.colored.wrapper.WrapperTexture;

public class MoveWrapperPanel extends GUIPanel
{
	private WrapperTexture wrapper;

	private UserInputLine path;
	private Button cancelButton;
	private Button applyButton;

	private int alertTime;

	public MoveWrapperPanel(String title, float xOffset, float yOffset, float width, float height)
	{
		super(title, xOffset, yOffset, width, height);

		this.fillColor = new Color(MapEditor.panelColor);

		int currentOffset = (int) yOffset + 5;

		this.path = new UserInputLine((int) xOffset + 5, (int) yOffset + 5, (int) width - 10, 40);
		this.path.setActive(true);
		this.path.setAllowSpecialCharacters(true);
		this.path.setOnlyNumeric(false);

		currentOffset += 45;

		this.cancelButton = new Button("Cancel", (int) (xOffset), (int) (currentOffset + height), (int) (width / 2), 40)
		{
			@Override
			public void onClick()
			{
				disable();
			}
		};

		this.applyButton = new Button("Apply", (int) (xOffset + width / 2), (int) (currentOffset + height), (int) (width / 2), 40)
		{
			@Override
			public void onClick()
			{
				String relevantPath = wrapper.getRelativePath().substring(FilePaths.WRAPPER_IMAGES.length() + 1);
				String validPath = null;

				if (!checkWrapper(path.getInput()))
				{
					if (path.getInput().endsWith("/"))
					{
						String checkPath = path.getInput().substring(0, path.getInput().length() - 1);
												
						checkPath = checkPath + "/" + (relevantPath.contains("/") ? relevantPath.substring(relevantPath.lastIndexOf('/') + 1) : relevantPath);
						
						if (checkWrapper(checkPath))
						{
							validPath = checkPath;
						}
						else
						{
							alertTime = 2000;

							return;
						}
					}
					else
					{
						alertTime = 2000;

						return;
					}
				}
				else
				{
					validPath = path.getInput();
				}

				path.setInput(validPath);

				validPath = FilePaths.WRAPPER_IMAGES + "/" + validPath;

				String originalPath = wrapper.getRelativePath();

				MapEditor.saveItAll();

				for (String levelID : Level.getLevelMap().keySet())
				{
					try
					{
						String wrapperFile = FilePaths.getFile(Level.getMapPathByID(levelID)) + "/wrappers.cfg";

						CSVReader reader = new CSVReader(new FileReader(wrapperFile));
						List<String[]> lines = new ArrayList<String[]>();

						String[] buffer;

						while ((buffer = reader.readNext()) != null)
						{
							if (buffer[0].equals(originalPath))
							{
								buffer[0] = validPath;

								if (buffer[25].equals(relevantPath))
								{
									buffer[25] = validPath.substring(FilePaths.WRAPPER_IMAGES.length() + 1);
								}
							}

							lines.add(buffer);
						}

						reader.close();

						CSVWriter writer = new CSVWriter(new FileWriter(wrapperFile));

						for (String[] line : lines)
						{
							writer.writeNext(line);
						}

						writer.close();
					}
					catch (Exception e)
					{
						alertTime = 3000;

						Debug.warn("Exception while updating wrapper path references for level " + levelID + ": " + e, e);

						return;
					}
				}

				Vector2f cameraOffset = MapEditor.getLevel().getCameraOffset();

				MapEditor.initMap(MapEditor.getLevel().getID(), Level.getMapPathByID(MapEditor.getLevel().getID()));
				MapEditor.adjustCameraOffset(GameLauncher.getContainer(), cameraOffset.x, cameraOffset.y);

				try
				{
					MapEditor.getImportPanel().refresh();
				}
				catch (IOException e)
				{
					Debug.warn("Something went wrong while updating the wrapper list in import panel after wrappers were moved: " + e, e);
				}
			}
		};

		this.setHeight(currentOffset + applyButton.getHeight() - yOffset + 25);
	}

	private boolean checkWrapper(String basePath)
	{
		return FilePaths.getFile(FilePaths.WRAPPER_IMAGES + "/" + basePath + "-1.png").exists() && FilePaths.getFile(FilePaths.WRAPPER_IMAGES + "/" + basePath + "-1m.png").exists();
	}

	public void init(WrapperTexture wrapper)
	{
		this.wrapper = wrapper;

		if (wrapper != null)
		{
			this.path.setInput(wrapper.getRelativePath().substring(FilePaths.WRAPPER_IMAGES.length() + 1));

			this.setActive(true);
		}
		else
		{
			this.setActive(false);
		}
	}

	@Override
	protected void customUpdate(GameContainer container, int delta)
	{
		this.path.update(container, delta);
		this.cancelButton.update(container, delta);
		this.applyButton.update(container, delta);

		if (alertTime > 0)
		{
			alertTime -= delta;

			this.path.setBorderColor(Color.red);
		}
		else
		{
			this.path.setBorderColor(Menu.UNSELECTED_COLOR);
		}
	}

	@Override
	protected void customRender(GameContainer container, float alphaFactor, Graphics g)
	{
		this.path.render(container, alphaFactor, g);
		this.cancelButton.render(container, alphaFactor, g);
		this.applyButton.render(container, alphaFactor, g);
	}

	@Override
	public void onPositionUpdate(int xChange, int yChange)
	{
		this.path.adjust(xChange, yChange);
		this.cancelButton.adjust(xChange, yChange);
		this.applyButton.adjust(xChange, yChange);
	}

	public WrapperTexture getWrapper()
	{
		return wrapper;
	}
}
