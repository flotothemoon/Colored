package com.unlogical.colored.terrain.tile.logical;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.Vector2;
import com.unlogical.colored.entity.key.EntityKey;
import com.unlogical.colored.entity.key.ITileKeyInteractable;
import com.unlogical.colored.entity.key.KeyPort;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.level.LevelType;
import com.unlogical.colored.terrain.TileType;
import com.unlogical.colored.terrain.property.TileProperty;
import com.unlogical.colored.util.ColorHelper;
import com.unlogical.colored.util.Dimension;

public class TileKeyGate extends TileGate implements ITileKeyInteractable
{
	private KeyPort port;

	public TileKeyGate(TileType type, String metadata, int innerType, float rotation, Vector2 position, Level level, Dimension dimension, TileProperty properties, boolean allowMirrors)
	{
		super(type, metadata, innerType, rotation, position, level, dimension, properties, allowMirrors);

		if (this.hasMirror())
		{
			((TileKeyGate) this.getMirroredTile()).setKeyPort(this.port);
		}
	}

	@Override
	public void readMetadata()
	{
		try
		{
			this.port = KeyPort.getTrigger(Integer.parseInt(this.metadata));
		}
		catch (Exception e)
		{
			this.port = KeyPort.YELLOW;
		}
	}

	@Override
	public void writeMetadata()
	{
		this.metadata = port.toPort() + "";
	}

	@Override
	protected Color customModifiyDrawColor(Color color)
	{
		return ColorHelper.inverseMultiplyRGBAndCopy(color, port.getColor(), Level.PORT_INVERSE_COLOR_FACTOR);
	}
	
	@Override
	public void onInteract(EntityKey key)
	{		
		if (this.closed)
		{
			this.open(false, !key.isShared(), false, !key.isShared());
			
			if (key.isShared() && this.hasMirror() && level.getType() != LevelType.REVERSAL)
			{
				((TileKeyGate) this.mirroredTile).open(false, false, false, !key.isShared());
			}
			
			key.onUsage(key.getHoldingEntity(), this);
		}
	}

	@Override
	public void setKeyPort(KeyPort port)
	{
		this.port = port;
	}

	@Override
	public boolean renderStatic()
	{
		return false;
	}

	@Override
	public KeyPort getKeyPort()
	{
		return port;
	}
}
