package com.unlogical.linked.gui.panel;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;

import com.unlogical.linked.GameLauncher;
import com.unlogical.linked.gui.button.Button;
import com.unlogical.linked.level.Level;
import com.unlogical.linked.levelrendering.LevelRenderer;
import com.unlogical.linked.mapeditor.MapEditor;
import com.unlogical.linked.resources.font.Fonts;
import com.unlogical.linked.util.ColorHelper;
import com.unlogical.linked.util.GameStatus;

public class SanityPanel extends GUIPanel
{
	private static final int PER_LEVEL_CHECK_TIME = 1337;
	private static boolean runningCheck;

	private int levelTime = 0;
	private int totalTime;
	private boolean finishedCheck;
	private Button startButton;
	private Level currentLevel;
	private List<String> levelIDs = new ArrayList<String>();
	private GameStatus beforeStatus;
	private String beforeLevelID;

	public SanityPanel(float xOffset, float yOffset, float width, float height)
	{
		super("Start Sanity Check", xOffset, yOffset, width, height);

		this.fillColor = new Color(MapEditor.panelColor);

		int lineHeight = 30;

		startButton = new Button("Start...", (int) xOffset, (int) (yOffset + height - lineHeight - 25), (int) width, lineHeight)
		{
			@Override
			public void onClick()
			{
				start();
			}
		};
		startButton.setActive(true);

		this.setHeight(height);
	}

	private void start()
	{
		if (!runningCheck)
		{
			levelTime = 0;
			totalTime = 0;

			levelIDs.clear();
			levelIDs.addAll(Level.getAllLevelIDs());

			Collections.sort(levelIDs);

			if (GameLauncher.getStatus() == GameStatus.MAP_EDITOR)
			{
				MapEditor.saveItAll();
			}

			beforeStatus = GameLauncher.getStatus();
			beforeLevelID = GameLauncher.getLevelContext() != null ? GameLauncher.getLevelContext().getID() : null;

			GameLauncher.setStatus(GameStatus.IN_MAP);

			LevelRenderer.initMap(Level.getMapPathByID(levelIDs.get(0)), false);

			currentLevel = LevelRenderer.getLevel();

			startButton.setActive(false);

			this.setTitle("Running Sanity Check...");
			
			runningCheck = true;
		}
	}

	@Override
	protected void customUpdate(GameContainer container, int delta)
	{		
		startButton.update(container, delta);
		
		if (runningCheck)
		{
			levelTime += delta;
			totalTime += delta;
			
			if (levelTime >= PER_LEVEL_CHECK_TIME)
			{
				levelTime = 0;
				
				if (levelIDs.indexOf(currentLevel.getID()) != levelIDs.size() - 1)
				{
					LevelRenderer.initMap(Level.getMapPathByID(levelIDs.get(levelIDs.indexOf(currentLevel.getID()) + 1)), false);
					
					currentLevel = LevelRenderer.getLevel();
				}
				else
				{
					runningCheck = false;
					finishedCheck = true;
					
					this.setTitle("Sanity Check Finished");
					startButton.setActive(true);
					
					GameLauncher.setStatus(beforeStatus);
					
					if (beforeLevelID != null)
					{
						if (beforeStatus == GameStatus.IN_MAP || beforeStatus == GameStatus.PAUSE_MENU)
						{
							LevelRenderer.initMap(Level.getMapPathByID(beforeLevelID), false);
						}
						else if (beforeStatus == GameStatus.MAP_EDITOR)
						{
							MapEditor.initMap(beforeLevelID, Level.getMapPathByID(beforeLevelID));
						}
					}
				}
			}
		}
	}

	@Override
	protected void customRender(GameContainer container, float alphaFactor, Graphics g)
	{
		int y = (int) (yOffset + 5);
		int x = (int) (xOffset + 5);
		int offset = g.getFont().getLineHeight() + 5;

		if (runningCheck || finishedCheck)
		{
			g.setFont(Fonts.getSmallBoldFont());
			g.drawString("Level: " + currentLevel.getName() + " (" + currentLevel.getID() + ")", x, y);
			y += offset;
					
			g.setFont(GameLauncher.getSmallFont());
			g.drawString("Total Levels: " + levelIDs.size(), x, y);
			y += offset;
			
						
			
			g.setColor(ColorHelper.applyAlphaAndCopy(Color.blue, 0.7f));
			g.fillRect(xOffset + 1, this.yOffset + this.height - 100, width * Math.min(1.0f, (float) totalTime / ((float) levelIDs.size() * PER_LEVEL_CHECK_TIME)) - 2, 40);
			g.setColor(ColorHelper.applyAlphaAndCopy(Color.white, 0.7f));
			g.drawRect(xOffset + 1, this.yOffset + this.height - 100, width - 2, 40);
		}
			
		startButton.render(container, alphaFactor, g);
	}

	@Override
	public void onPositionUpdate(int xChange, int yChange)
	{
		startButton.adjust(xChange, yChange);
	}

	public static boolean isRunningCheck()
	{
		return runningCheck;
	}
}
