package com.unlogical.linked.gui.menu;

import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;

import com.unlogical.linked.GameLauncher;
import com.unlogical.linked.configuration.Resolutions;
import com.unlogical.linked.util.GameStatus;



public class MenuDisplay
{
	private static MainMenu mainMenu;
	private static PauseMenu pauseMenu;
	private static SettingsMenu settingsMenu;
	private static PlayMenu playMenu;
	private static MapEditorMenu mapEditorMenu;
	private static MapSelection mapSelection;
	private static MapCreationMenu mapCreationMenu;

	private static int timeSinceLoading = 5000;
	private static boolean statusChanged;
	private static GameStatus lastStatus;

	public static void init()
	{
		pauseMenu = new PauseMenu(Resolutions.MENU_Y_OFFSET, Resolutions.MENU_OFFSET);
		mainMenu = new MainMenu(Resolutions.MENU_Y_OFFSET, Resolutions.MENU_OFFSET);
		settingsMenu = new SettingsMenu(Resolutions.SETTINGS_MENU_Y_OFFSET, Resolutions.SETTINGS_MENU_OFFSET);
		playMenu = new PlayMenu(Resolutions.MENU_Y_OFFSET, Resolutions.MENU_OFFSET);
		mapEditorMenu = new MapEditorMenu(Resolutions.MENU_Y_OFFSET, Resolutions.SELECTION_MENU_WIDTH, Resolutions.SELECTION_MENU_HEIGHT);
		mapSelection = new MapSelection(Resolutions.MENU_Y_OFFSET, Resolutions.SELECTION_MENU_WIDTH, Resolutions.SELECTION_MENU_HEIGHT);
		mapCreationMenu = new MapCreationMenu();	
	}

	public static void render(GameContainer container, Graphics g)
	{
		mainMenu.render(container, g);
		pauseMenu.render(container, g);
		settingsMenu.render(container, g);
		playMenu.render(container, g);
		mapEditorMenu.render(container, g);
		mapSelection.render(container, g);
		mapCreationMenu.render(container, g);
	}

	public static void update(GameContainer container, int delta) throws SlickException
	{
		if (timeSinceLoading > 0)
		{
			timeSinceLoading -= delta;
		}

		statusChanged = !(GameLauncher.getStatus() == lastStatus);
		lastStatus = GameLauncher.getStatus();

		if (statusChanged)
		{
			pauseMenu.setActive(false);
			mainMenu.setActive(false);
			settingsMenu.setActive(false);
			playMenu.setActive(false);
			mapEditorMenu.setActive(false);
			mapSelection.setActive(false);
			mapCreationMenu.setActive(false);
		}

		if (GameLauncher.getStatus() == GameStatus.MAIN_MENU)
		{
			mainMenu.update(container, delta);
			mainMenu.setActive(true);
		}
		else if (GameLauncher.getStatus() == GameStatus.PAUSE_MENU)
		{
			pauseMenu.update(container, delta);
			pauseMenu.setActive(true);
		}
		else if (GameLauncher.getStatus() == GameStatus.SETTINGS_MENU)
		{
			settingsMenu.setActive(true);
			settingsMenu.update(container, delta);
		}
		else if (GameLauncher.getStatus() == GameStatus.PLAY_MENU)
		{
			playMenu.setActive(true);
			playMenu.update(container, delta);
		}
		else if (GameLauncher.getStatus() == GameStatus.MAP_EDITOR_MENU)
		{
			mapEditorMenu.update(container, delta);

			if (statusChanged)
			{
				mapEditorMenu.setActive(true);
				mapEditorMenu.updateSaveStates();
			}
		}
		else if (GameLauncher.getStatus() == GameStatus.CUSTOM_MAP_SELECTION)
		{
			mapSelection.update(container, delta);
			if (statusChanged)
			{
				mapSelection.setActive(true);
				mapSelection.updateSaveStates();
			}
		}
		else if (GameLauncher.getStatus() == GameStatus.MAP_CREATION_MENU)
		{
			mapCreationMenu.update(container, delta);
			mapCreationMenu.setActive(true);
		}
	}
	
	public void updateMaps()
	{
		mapSelection.updateSaveStates();
	}
}
