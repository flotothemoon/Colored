package com.unlogical.colored.gui.menu;

import java.io.IOException;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

import com.unlogical.colored.GameLauncher;
import com.unlogical.colored.configuration.Resolutions;
import com.unlogical.colored.filesystem.FilePaths;
import com.unlogical.colored.resources.image.Images;
import com.unlogical.colored.util.ColorHelper;
import com.unlogical.colored.util.GameStatus;
import com.unlogical.colored.util.Renderer;
import com.unlogical.colored.util.ShaderHandler;
import com.unlogical.colored.util.Transitions;

public class MenuDisplay
{
	private static final int DEFAULT_DISPALY_SAVING_TIME = (int) (1337 * 1.5f);

	private static MainMenu mainMenu;
	private static PauseMenu pauseMenu;
	private static SettingsMenu settingsMenu;
	private static PlayMenu playMenu;
	private static MapEditorMenu mapEditorMenu;
	private static MapSelection mapSelection;
	private static MapCreationMenu mapCreationMenu;

	private static String savingText;
	private static int totalDisplaySavingTime;
	private static int displaySavingTime;
	private static boolean statusChanged;
	private static GameStatus lastStatus;

	public static void init() throws IOException
	{
		pauseMenu = new PauseMenu(Resolutions.MENU_Y_OFFSET, Resolutions.MENU_OFFSET);
		mainMenu = new MainMenu(Resolutions.MENU_Y_OFFSET, Resolutions.MENU_OFFSET);
		settingsMenu = new SettingsMenu(Resolutions.SETTINGS_MENU_Y_OFFSET, Resolutions.SETTINGS_MENU_OFFSET);
		playMenu = new PlayMenu(Resolutions.MENU_Y_OFFSET, Resolutions.MENU_OFFSET);
		mapEditorMenu = new MapEditorMenu(Resolutions.MENU_Y_OFFSET, Resolutions.SELECTION_MENU_WIDTH, Resolutions.SELECTION_MENU_HEIGHT);
		mapSelection = new MapSelection(Resolutions.MENU_Y_OFFSET, Resolutions.SELECTION_MENU_WIDTH, Resolutions.SELECTION_MENU_HEIGHT);
		mapCreationMenu = new MapCreationMenu();

		Images.registerAndLoad("saving", FilePaths.GUI + "/saving.png", false);
	}

	public static void update(GameContainer container, int delta) throws SlickException
	{
		statusChanged = !(GameLauncher.getStatus() == lastStatus);
		lastStatus = GameLauncher.getStatus();

		if (statusChanged)
		{
			pauseMenu.setActive(false);
			mainMenu.setActive(false);
			settingsMenu.setActive(false);
			playMenu.setActive(false);
			mapEditorMenu.setActive(false);
			mapSelection.setActive(false);
			mapCreationMenu.setActive(false);
		}

		if (!GameLauncher.getSanityPanel().isShown() || !GameLauncher.getSanityPanel().isActive())
		{
			if (GameLauncher.getStatus() == GameStatus.MAIN_MENU)
			{
				mainMenu.setActive(true);
				mainMenu.update(container, delta);
			}
			else if (GameLauncher.getStatus() == GameStatus.PAUSE_MENU)
			{
				pauseMenu.setActive(true);
				pauseMenu.update(container, delta);
			}
			else if (GameLauncher.getStatus() == GameStatus.SETTINGS_MENU)
			{
				settingsMenu.setActive(true);
				settingsMenu.update(container, delta);
			}
			else if (GameLauncher.getStatus() == GameStatus.PLAY_MENU)
			{
				playMenu.setActive(true);
				playMenu.update(container, delta);
			}
			else if (GameLauncher.getStatus() == GameStatus.MAP_EDITOR_MENU)
			{
				mapEditorMenu.update(container, delta);

				if (statusChanged)
				{
					mapEditorMenu.setActive(true);
					mapEditorMenu.updateSaveStates();
				}
			}
			else if (GameLauncher.getStatus() == GameStatus.CUSTOM_MAP_SELECTION)
			{
				if (statusChanged)
				{
					mapSelection.setActive(true);
					mapSelection.updateSaveStates();
				}

				mapSelection.update(container, delta);
			}
			else if (GameLauncher.getStatus() == GameStatus.MAP_CREATION_MENU)
			{
				mapCreationMenu.update(container, delta);
				mapCreationMenu.setActive(true);
			}
		}

		if (displaySavingTime > 0)
		{
			displaySavingTime -= delta;
		}
	}

	public static void render(GameContainer container, Graphics g)
	{
		mainMenu.render(container, g);
		pauseMenu.render(container, g);
		settingsMenu.render(container, g);
		playMenu.render(container, g);
		mapEditorMenu.render(container, g);
		mapSelection.render(container, g);
		mapCreationMenu.render(container, g);

		if (displaySavingTime > 0)
		{
			ShaderHandler.disableLighting();
			Image image = Images.getImage("saving");
			Color color = ColorHelper.applyAlphaAndCopy(Color.white, Transitions.getFactor(((float) displaySavingTime) / ((float) totalDisplaySavingTime)));

			g.drawImage(image, GameLauncher.getWidth() - image.getWidth() - 16, GameLauncher.getHeight() - image.getHeight() - 64, color);
			g.setFont(GameLauncher.getSmallFont());
			g.setColor(color);
			
			ShaderHandler.disableLighting();
			
			g.drawString(savingText, GameLauncher.getWidth() - image.getWidth() / 2 - 16 - g.getFont().getWidth(savingText) / 2, GameLauncher.getHeight() - 60);
			
			Renderer.clearBind();
		}
	}

	public static void displaySavedMessage(String text, int displayTime)
	{
		savingText = text;
		totalDisplaySavingTime = displayTime;
		displaySavingTime = displayTime;
	}

	public static void displaySavedMessage(int displayTime)
	{
		displaySavedMessage("", displayTime);
	}

	public static void displaySavedMessage(String text)
	{
		displaySavedMessage(text, DEFAULT_DISPALY_SAVING_TIME);
	}

	public static void displaySavedMessage()
	{
		displaySavedMessage("", DEFAULT_DISPALY_SAVING_TIME);
	}

	public static void refreshLevels()
	{
		mapSelection.refresh();
	}
}
