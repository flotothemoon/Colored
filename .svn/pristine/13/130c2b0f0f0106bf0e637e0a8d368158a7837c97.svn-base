package com.unlogical.colored.gui.panel;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.unlogical.colored.GameLauncher;
import com.unlogical.colored.entity.player.EntityPlayer;
import com.unlogical.colored.gui.menu.MenuHandler;
import com.unlogical.colored.level.LevelType;
import com.unlogical.colored.levelmanaging.LevelManager;
import com.unlogical.colored.levelmanaging.MapManager;
import com.unlogical.colored.mapeditor.MapEditor;
import com.unlogical.colored.resources.font.Fonts;
import com.unlogical.colored.util.Renderer;
import com.unlogical.colored.util.ShaderHandler;

public class DebugPanel extends GUIPanel
{
	private long lastRenderCalls;
	private long lastTextureSwitches;

	public DebugPanel(float xOffset, float yOffset, float width, float height)
	{
		super("Debug", xOffset, yOffset, width, height);

		this.fillColor = new Color(MapEditor.panelColor);
		this.setHeight((Fonts.getSmallFont().getLineHeight() + 5) * 11);
	}

	@Override
	protected void customRender(float alphaFactor, Batch batch)
	{
		int y = (int) (this.yOffset + 5);
		int x = (int) (this.xOffset + 5);

		Renderer.setFont(Fonts.getSmallFont());

		int offset = Renderer.getLineHeight() + 5;
		EntityPlayer player = LevelManager.getLevel().getControllingPlayer();

		Renderer.useSpriteBatch();

		Renderer.setFont(Fonts.getSmallBoldFont());
		Renderer.drawString("Level: " + GameLauncher.getLevelContext().getName() + " (" + GameLauncher.getLevelContext().getID() + ")" + " - " + Integer.toHexString(GameLauncher.getLevelContext().hashCode()), x, y, 1.0f, batch);
		y += offset;

		Renderer.setFont(Fonts.getSmallFont());

		Renderer.drawString("LevelType: " + player.getLevel().getType(), x, y, 1.0f, batch);
		y += offset;

		Renderer.drawString("Checkpoint: " + (LevelManager.getCurrentCheckpoint() == null ? "Not set" : "Set") + " (total: " + LevelManager.getCheckpoints().size() + ")", x, y, 1.0f, batch);
		y += offset;

		Renderer.drawString("FPS: " + GameLauncher.getFPS() + " (Lock: " + GameLauncher.getTargetFPS() + ", vsync:" + GameLauncher.isVSync() + ")", x, y, 1.0f, batch);
		y += offset;

		Renderer.drawString("Memory Usage: " + GameLauncher.getUsedMemory() + " (" + GameLauncher.getUsedMemory() * 100 / GameLauncher.getAllocatedMemory() + "%) / " + GameLauncher.getAllocatedMemory() + "MB", x, y, 1.0f, batch);
		y += offset;

		Renderer.drawString("Dimension: " + player.getDimension(), x, y, 1.0f, batch);
		y += offset;

		if (player.getLevel().getType() == LevelType.TIME_TRAVEL || player.getLevel().getType() == LevelType.FROZEN)
		{
			Renderer.drawString("CurrentFrame: " + player.getLevel().timeStepHandler.currentFrameStart + " (" + player.getLevel().timeStepHandler.currentFrameBeforeStart + ") - " + player.getLevel().timeStepHandler.currentFrameEnd, x, y, 1.0f, batch);
			y += offset;
		}

		Renderer.drawString((GameLauncher.isFullscreenMode() ? "F" : "W") + ": " + Gdx.graphics.getWidth() + "x" + Gdx.graphics.getHeight() + " (" + Math.round((float) Gdx.graphics.getWidth() / (float) Gdx.graphics.getHeight() * 100) / 100.0f + ") - " + GameLauncher.getWidth() + "x" + GameLauncher.getHeight() + " (" + Math.round(GameLauncher.TARGET_RATIO * 100) / 100.0f + ")", x, y, 1.0f, batch);
		y += offset;

		if (player.isSuffocating() || player.hasMirror() && player.getMirroredEntity().isSuffocating())
		{
			if (player.isSuffocating())
			{
				Renderer.drawString("Suffocating!", x, y, 1.0f, batch);
			}
			else
			{
				Renderer.drawString("Can't toggle!", x, y, 1.0f, batch);
			}

			y += offset;
		}

		Renderer.drawString("CameraOffset: " + LevelManager.getLevel().getCameraOffset().x + " | " + LevelManager.getLevel().getCameraOffset().y, x, y, 1.0f, batch);
		y += offset;

		Renderer.drawString("E: " + LevelManager.getLevel().getEntities().size() + " | T: " + GameLauncher.getLevelContext().getTiles().size() + " | W: " + GameLauncher.getLevelContext().getWrappers().size() + " | E-P: " + LevelManager.getLevel().getParticleSystem().getEmitterCount() + " - " + LevelManager.getLevel().getParticleSystem().getParticleCount() + " / " + LevelManager.getLevel().getParticleSystem().getRealParticleCount(), x, y, 1.0f, batch);
		y += offset;

		Renderer.drawString("Menu: E: " + MenuHandler.getActiveMenuParticleEmitters() + " / " + MenuHandler.getMenuParticleEmitters() + " | " + " P: " + MenuHandler.getMenuRealParticleCount() + " / " + MenuHandler.getMenuRealParticleCount(), x, y, batch);
		y += offset;

		Renderer.drawString("Lighting: " + (ShaderHandler.isEnabled() ? "enabled" : "disabled") + ", lights: " + ShaderHandler.getLights().size(), x, y, 1.0f, batch);
		y += offset;

		Renderer.drawString("Render Calls: " + (Renderer.useSpriteBatch().totalRenderCalls - this.lastRenderCalls) + " (TS: " + (Renderer.useSpriteBatch().totalTextureSwitches - this.lastTextureSwitches) + ")", x, y, 1.0f, batch);
		y += offset;

		if (LevelManager.isTransitioning())
		{
			Renderer.drawString("TransitionTime: " + LevelManager.getDimensionTransitionTime(), x, y, 1.0f, batch);
			y += offset;
		}

		if (MapManager.isReSimulating())
		{
			Renderer.drawString("ReSimulating?", x, y, 1.0f, batch);
			y += offset;
		}

		if (y - this.yOffset + 20 != this.height)
		{
			this.setHeight(y - this.yOffset + 20);
		}

		this.lastRenderCalls = Renderer.useSpriteBatch().totalRenderCalls;
		this.lastTextureSwitches = Renderer.useSpriteBatch().totalTextureSwitches;
	}
}
