package com.unlogical.colored.levelmanaging;

import java.util.ArrayList;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;

import com.unlogical.colored.entity.Entity;
import com.unlogical.colored.util.ColorHelper;
import com.unlogical.colored.util.Dimension;
import com.unlogical.colored.util.ShaderHandler;

public class EntityManager
{
	public static void updateEntities(Dimension dimension, GameContainer container, int delta, float dimensionDelta)
	{
		ArrayList<Entity> entities = LevelManager.getLevel().getEntities();
		
		for (int i = 0; i < entities.size(); i++)
		{
			if (entities.get(i).getDimension() == dimension && (!LevelManager.getLevel().isUpdatingOnlyCycleObjects() || entities.get(i).isCycleObject()))
			{
				if (entities.get(i).isTimeEffected() && !entities.get(i).isShared() && !(entities.get(i).getHoldingEntity() != null && (!entities.get(i).getHoldingEntity().isTimeEffected() || entities.get(i).isShared())))
				{
					entities.get(i).update(container, dimensionDelta);
				}
				else
				{
					entities.get(i).update(container, delta);
				}
			}
		}
	}
	
	public static void renderDimension(GameContainer container, Graphics g, Dimension dimension, boolean shared)
	{		
		for (int i = 0; i < LevelManager.getLevel().getEntities().size(); i++)
		{
			Entity entity = LevelManager.getLevel().getEntities().get(i);

			if (entity.getDimension() == dimension && !entity.isShared() || shared && entity.isShared())
			{
				entity.draw(g);
				
				if (LevelManager.getLevel().shouldShowHitboxes())
				{
					ShaderHandler.disableLighting();
					
					if (dimension == LevelManager.getLevel().getForegroundDimension())
					{
						g.setColor(Color.blue);
					}
					else
					{
						g.setColor(ColorHelper.applyAlphaAndCopy(Color.blue, 0.7f));
					}

					g.draw(entity.getHitbox());
				}
			}
		}
	}
}