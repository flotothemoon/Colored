package com.unlogical.linked.terrain.tile.platform;

import java.util.Random;

import org.newdawn.slick.geom.Vector2f;

import com.unlogical.linked.level.Level;
import com.unlogical.linked.level.LevelType;
import com.unlogical.linked.terrain.TileType;
import com.unlogical.linked.terrain.property.TileProperty;
import com.unlogical.linked.terrain.tile.Tile;
import com.unlogical.linked.terrain.tile.properties.ITileMoveable;
import com.unlogical.linked.terrain.tile.properties.ITileReceiver;
import com.unlogical.linked.util.Dimension;
import com.unlogical.linked.util.Event;

public class TilePlatform extends Tile implements ITileMoveable, ITileReceiver
{
	public static final int ROTATION_LEFT = 0;
	public static final int ROTATION_CENTER = 1;
	public static final int ROTATION_RIGHT = 2;

	private static final String TRIGGER = "trigger";
	private static final String UNTRIGGER = "untrigger";

	private TilePlatformType platformType;

	protected boolean movingClockwise;
	protected boolean movingRight;
	protected boolean movingUp;
	private boolean verticalMoving;
	private boolean horizontalMoving;
	private boolean rotating;
	private boolean shouldMove = true;
	private boolean limited;
	private boolean startMoveRight;

	protected float maxSpeed;
	private float rotationVelocity;
	private float acceleration = 0.0004f;
	private float rotationChange;

	private int startLimit;
	private int endLimit;
	private int absStartLimit;
	private int absEndLimit;

	private int rotationAnchor;

	private int rotationAnchorX;
	private int rotationAnchorY;

	public TilePlatform(TileType type, String metadata, int innerType, float rotation, Vector2f position, Level level, Dimension dimension, TileProperty properties, boolean allowMirrors)
	{
		super(type, metadata, innerType, rotation, position, level, dimension, properties, allowMirrors);
	}

	@Override
	public void init()
	{
		super.init();

		this.initPlatform();
	}

	@Override
	public void initMirror(Tile mirroredTile, LevelType levelType)
	{
		if (levelType == LevelType.REVERSAL)
		{		
			boolean listen = this.listen(this.receivePort);
			this.setTriggered(!listen);
			this.trigger(listen);
			
			((TilePlatform) this.mirroredTile).reverseMovement();
			
			if (!this.limited)
			{
				this.reverseMovement();
			}
			
			if (this.limited)
			{
				if (this.horizontalMoving)
				{					
					mirroredTile.setX(this.startMoveRight ? this.absStartLimit : this.absEndLimit - this.hitbox.getRawWidth());
				}
				else if (this.verticalMoving)
				{
					mirroredTile.setY(this.startMoveRight ? this.absStartLimit : this.absEndLimit - this.hitbox.getRawHeight());
				}
				else if (this.rotating)
				{
					mirroredTile.setRotation(this.endLimit);
				}
			}
			else
			{
				this.initialising = true;

				this.mirroredTile.setPosition(this.position.x, this.position.y);

				this.dimension = Dimension.SHADOW;
				this.update(null, 0.0f);
				this.dimension = Dimension.LIGHT;

				this.initialising = false;

				if (this.horizontalMoving)
				{
					if (this.movingRight)
					{
						if (this.hitbox.isCheckedRight())
						{
							this.mirroredTile.setX(this.getX() + this.hitbox.getDistanceToBlockRight());
						}
						else
						{
							this.mirroredTile.setX(this.level.getMapWidth());
						}
					}
					else
					{
						if (this.hitbox.isCheckedLeft())
						{
							this.mirroredTile.setX(this.getX() - this.hitbox.getDistanceToBlockLeft());
						}
						else
						{
							this.mirroredTile.setX(-this.hitbox.getWidth());
						}
					}
				}
				else if (this.verticalMoving)
				{
					if (this.movingUp)
					{
						if (this.hitbox.isCheckedAbove())
						{
							this.mirroredTile.setY(this.getY() - this.hitbox.getDistanceToBlockAbove());
						}
						else
						{
							this.mirroredTile.setY(-this.hitbox.getHeight());
						}
					}
					else
					{
						if (this.hitbox.isCheckedBelowLeft() || this.hitbox.isCheckedBelowRight())
						{
							this.mirroredTile.setY(this.getY() + this.hitbox.getDistanceToBlockBelow());
						}
						else
						{
							this.mirroredTile.setY(this.level.getMapHeight());
						}
					}
				}
			}
			
			if (!this.limited)
			{
				this.reverseMovement();
			}
		}
	}

	@Override
	public void onUpdate(float delta, Random rng)
	{
		if (shouldMove)
		{
			if (horizontalMoving)
			{
				if (movingRight)
				{
					if (!(this.limited && this.hitbox.getMaxX() >= absEndLimit + level.getCameraOffset().x) && !collidedRight)
					{
						velocity.x += acceleration * delta;
					}
				}
				else
				{
					if (!(this.limited && this.hitbox.getMinX() <= absStartLimit + level.getCameraOffset().x) && !collidedLeft)
					{
						velocity.x -= acceleration * delta;
					}
				}

				if (this.limited)
				{
					if (this.hitbox.getMaxX() + this.velocity.x * delta >= absEndLimit + level.getCameraOffset().x)
					{
						this.position.x = absEndLimit + level.getCameraOffset().x - this.hitbox.getWidth();
						this.velocity.x = 0.0f;
					}
					else if (this.hitbox.getMinX() + this.velocity.x * delta <= absStartLimit + level.getCameraOffset().x)
					{
						this.position.x = absStartLimit + level.getCameraOffset().x;
						this.velocity.x = 0.0f;
					}
				}
				
				if (velocity.x > maxSpeed)
				{
					velocity.x = maxSpeed;
				}
				else if (-velocity.x > maxSpeed)
				{
					velocity.x = -maxSpeed;
				}
			}
			else if (verticalMoving)
			{
				if (movingUp)
				{	
					if (!(this.limited && this.hitbox.getMinY() <= absStartLimit + level.getCameraOffset().y) && !collidedAbove)
					{
						velocity.y -= acceleration * delta;
					}
				}
 				else if (!(this.limited && this.hitbox.getMaxY() >= absEndLimit + level.getCameraOffset().y) && !collidedBelow)
				{
					velocity.y += acceleration * delta;
				}

				if (this.limited && velocity.y != 0.0f)
				{
					if (!movingUp && this.hitbox.getMaxY() + this.velocity.y * delta >= absEndLimit + level.getCameraOffset().y)
					{
						lockConnections();
						this.position.y = absEndLimit + level.getCameraOffset().y - this.hitbox.getHeight();
						updateConnections();
						resetVelocities();
					}
					else if (movingUp && this.hitbox.getMinY() + this.velocity.y * delta <= absStartLimit + level.getCameraOffset().y)
					{
						lockConnections();
						this.position.y = absStartLimit + level.getCameraOffset().y;
						updateConnections();
						resetVelocities();
					}
				}

				if (velocity.y > 0 && velocity.y > maxSpeed)
				{
					velocity.y = maxSpeed;
				}
				else if (velocity.y < 0 && -velocity.y > maxSpeed)
				{
					velocity.y = -maxSpeed;
				}
			}
			else if (rotating)
			{
				float rotation = this.rotation;
								
				if (movingClockwise)
				{
					if (rotation < this.absEndLimit)
					{
						rotation += this.rotationVelocity * delta;

						if (rotation > this.absEndLimit)
						{
							rotation = this.absEndLimit;
						}
					}
				}
				else if (rotation > this.absStartLimit)
				{
					rotation -= this.rotationVelocity * delta;

					if (rotation < this.absStartLimit)
					{
						rotation = this.absStartLimit;
					}
				}

				this.rotationChange = rotation - this.rotation;
				
				if (this.getRotation() != rotation)
				{
					changeRotationTo(rotation);
				}
			}
		}
		else
		{
			velocity.x = 0.0f;
			velocity.y = 0.0f;
		}
	}

	@Override
	public void readMetadata()
	{
		String[] data = metadata.split(":");

		try
		{
			this.platformType = TilePlatformType.values()[Integer.parseInt(data[0])];
			this.maxSpeed = Float.parseFloat(data[1]);
			this.rotationVelocity = Float.parseFloat(data[2]);
			this.limited = Boolean.parseBoolean(data[3]);
			this.startLimit = Integer.parseInt(data[4]);
			this.endLimit = Integer.parseInt(data[5]);
			this.setPort(Integer.parseInt(data[6]));
			this.startMoveRight = Boolean.parseBoolean(data[7]);
			this.rotationAnchor = Integer.parseInt(data[8]);
		}
		catch (Exception e)
		{
			this.maxSpeed = 0.08f;
			this.rotationVelocity = 0.1f;
			this.platformType = TilePlatformType.HORIZONTAL;
		}

		initPlatform();
	}

	public void initPlatform()
	{
		this.horizontalMoving = this.platformType == TilePlatformType.HORIZONTAL;
		this.verticalMoving = this.platformType == TilePlatformType.VERTICAL;
		this.rotating = this.platformType == TilePlatformType.ROTATING;

		if (this.limited)
		{
			if (this.horizontalMoving)
			{
				this.absStartLimit = (int) (this.hitbox.getMinX() - this.startLimit);
				this.absEndLimit = (int) (this.hitbox.getMaxX() + this.endLimit);
			}
			else if (this.verticalMoving)
			{
				this.absStartLimit = (int) (this.hitbox.getMinY() - this.startLimit);
				this.absEndLimit = (int) (this.hitbox.getMaxY() + this.endLimit);
			}
			else if (this.rotating)
			{
				this.absStartLimit = (int) (this.startLimit + this.rotation);
				this.absEndLimit = (int) (this.endLimit + this.rotation);
			}
		}

		if (this.horizontalMoving)
		{
			this.movingRight = this.startMoveRight;
		}
		else if (this.verticalMoving)
		{
			this.movingUp = !this.startMoveRight;
		}
		else if (this.rotating)
		{
			this.movingClockwise = !this.startMoveRight;
		}

		this.updateAnchor();
	}

	@Override
	public void onReSimulation()
	{
		super.onReSimulation();
		
		if (rotating)
		{
			this.setRotation(this.mirroredTile.getRotation());
		}
	}

	@Override
	protected float getAdditionalCheckDistance(Vector2f otherVelocity)
	{
		if (this.initialising)
		{
			return Math.max(level.getMapWidth(), level.getMapHeight());
		}
		else
		{
			return this.velocity.length() + otherVelocity.length() * 20;
		}
	}
	
	@Override
	public void writeMetadata()
	{
		this.metadata = this.platformType.ordinal() + ":" + this.maxSpeed + ":" + this.rotationVelocity + ":" + this.limited + ":" + this.startLimit + ":" + this.endLimit + ":" + this.getPort() + ":" + this.startMoveRight + ":" + this.rotationAnchor;
	}

	@Override
	public void onTrigger()
	{
		if (verticalMoving)
		{
			this.movingUp = startMoveRight;
		}

		if (horizontalMoving)
		{
			this.movingRight = !startMoveRight;
		}

		if (rotating)
		{
			this.movingClockwise = startMoveRight;
		}
				
		if (shouldRecord())
		{
			scheduleMirroredEvent(new Event(TRIGGER));
		}
	}

	@Override
	public void onUntrigger()
	{
		if (verticalMoving)
		{
			movingUp = startMoveRight;
		}

		if (horizontalMoving)
		{
			movingRight = startMoveRight;
		}

		if (rotating)
		{
			movingClockwise = !startMoveRight;
		}
		
		if (shouldRecord())
		{
			scheduleMirroredEvent(new Event(UNTRIGGER));
		}
	}

	@Override
	protected void onScheduledEvent(Event event)
	{
		if (event.type == TRIGGER)
		{
			onTrigger();
		}
		else if (event.type == UNTRIGGER)
		{
			onUntrigger();
		}
	}

	protected void reverseMovement()
	{
		if (verticalMoving)
		{
			movingUp = !movingUp;
		}

		if (horizontalMoving)
		{
			movingRight = !movingRight;
		}

		if (rotating)
		{
			movingClockwise = !movingClockwise;
		}
	}

	public void updateAnchor()
	{
		if (this.rotationAnchor == ROTATION_LEFT)
		{
			this.rotationAnchorX = 0;
		}
		else if (this.rotationAnchor == ROTATION_CENTER)
		{
			this.rotationAnchorX = (int) (this.hitbox.getRawWidth() / 2);
		}
		else if (this.rotationAnchor == ROTATION_RIGHT)
		{
			this.rotationAnchorX = (int) this.hitbox.getRawWidth();
		}
		else
		{
			throw new IllegalStateException("Invalid rotation anchor. Ouch. (" + this.rotationAnchor + ")");
		}

		if (this.rotationAnchor == ROTATION_CENTER)
		{
			this.rotationAnchorY = (int) (this.hitbox.getRawHeight() / 2);
		}
		else
		{
			if (this.startMoveRight)
			{
				this.rotationAnchorY = 0;
			}
			else
			{
				this.rotationAnchorY = (int) (this.hitbox.getRawHeight());
			}
		}

		this.setRotation(this.getRotation());
	}

	public void updateMovement()
	{
		this.horizontalMoving = this.platformType == TilePlatformType.HORIZONTAL;
		this.verticalMoving = this.platformType == TilePlatformType.VERTICAL;
		this.rotating = this.platformType == TilePlatformType.ROTATING;
	}

	public void setStartMoveRight(boolean startMoveRight)
	{
		this.startMoveRight = startMoveRight;

		if (this.horizontalMoving)
		{
			this.movingRight = this.startMoveRight;
		}
		else if (this.verticalMoving)
		{
			this.movingUp = !this.startMoveRight;
		}
		else if (this.rotating)
		{
			this.movingClockwise = !this.startMoveRight;
		}
	}
	
	@Override
	public boolean shouldMove()
	{
		return !this.initialising;
	}

	@Override
	public boolean renderStatic()
	{
		return false;
	}

	@Override
	public float getRotationChange()
	{
		return rotationChange;
	}

	@Override
	protected boolean collidesWithTerrain()
	{
		return true;
	}

	@Override
	public boolean shouldUpdate()
	{
		return true;
	}

	@Override
	public float getCenterOfRotationX()
	{
		return rotationAnchorX + position.x;
	}

	@Override
	public float getCenterOfRotationY()
	{
		return rotationAnchorY + position.y;
	}
	
	@Override
	public boolean isHorizontallyMoveable()
	{
		return horizontalMoving;
	}

	@Override
	public boolean isVerticallyMoveable()
	{
		return verticalMoving;
	}

	@Override
	public boolean isRotatable()
	{
		return rotating;
	}

	@Override
	public boolean isReallyChangeable()
	{
		return true;
	}

	public TilePlatformType getPlatformType()
	{
		return this.platformType;
	}

	public boolean isLimited()
	{
		return limited;
	}

	public boolean isStartMoveRight()
	{
		return startMoveRight;
	}

	public float getMaxSpeed()
	{
		return maxSpeed;
	}

	public float getAcceleration()
	{
		return acceleration;
	}

	public float getRotationVelocity()
	{
		return rotationVelocity;
	}

	public int getStartLimit()
	{
		return startLimit;
	}

	public int getEndLimit()
	{
		return endLimit;
	}

	public void setPlatformType(TilePlatformType platformType)
	{
		this.platformType = platformType;
	}

	public void setLimited(boolean limited)
	{
		this.limited = limited;
	}

	public void setMaxSpeed(float maxSpeed)
	{
		this.maxSpeed = maxSpeed;
	}

	public void setRotationVelocity(float rotationVelocity)
	{
		this.rotationVelocity = rotationVelocity;
	}

	public void setStartLimit(int startLimit)
	{
		this.startLimit = startLimit;
	}

	public void setEndLimit(int endLimit)
	{
		this.endLimit = endLimit;
	}

	public int getRotationAnchor()
	{
		return rotationAnchor;
	}

	public void setRotationAnchor(int rotationAnchor)
	{
		this.rotationAnchor = rotationAnchor;
	}
}
