package com.unlogical.colored.util;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Mesh;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.VertexAttribute;
import com.badlogic.gdx.graphics.VertexAttributes.Usage;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.glutils.ShaderProgram;
import com.badlogic.gdx.math.Affine2;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.utils.NumberUtils;

/*
 * Original source code taken from com.badlogic.gdx.graphics.g2d.SpriteBatch, modified to account for additional vertex
 * attributes and modified mesh
 */
public class ExtendedSpriteBatch implements IExtendedSpriteBatch
{
	public static final String GRAYSCALE_ATTRIBUTE = "a_grayscaleFactor";
	public static final String ADDITIVE_TINT_ATTRIBUTE = "a_additiveTint";
	public static final String AMBIENT_COLOR_UNIFORM = "u_ambientColor";

	private Mesh mesh;

	final float[] vertices;
	final int verticesPerSprite;
	final int valuesPerVertice;
	int idx = 0;
	Texture lastTexture = null;
	float invTexWidth = 0, invTexHeight = 0;

	boolean drawing = false;

	private final Matrix4 transformMatrix = new Matrix4();
	private final Matrix4 projectionMatrix = new Matrix4();
	private final Matrix4 combinedMatrix = new Matrix4();

	private boolean blendingDisabled = false;
	private int blendSrcFunc = GL20.GL_SRC_ALPHA;
	private int blendDstFunc = GL20.GL_ONE_MINUS_SRC_ALPHA;

	private float grayScaleFactor = 0.0f;
	private float saturation = 1.0f;

	private final ShaderProgram shader;
	private ShaderProgram customShader = null;
	private boolean ownsShader;

	float color = Color.WHITE.toFloatBits();
	float additiveColor = Color.BLACK.toFloatBits();

	Color ambientColor = new Color(Color.WHITE);;
	private Color tempColor = new Color(1, 1, 1, 1);

	/** Number of all texture switches, ever **/
	public int totalTextureSwitches = 0;

	/** Number of render calls since the last {@link #begin()}. **/
	public int renderCalls = 0;

	/**
	 * Number of rendering calls, ever. Will not be reset unless set manually.
	 **/
	public int totalRenderCalls = 0;

	/** The maximum number of sprites rendered in one batch so far. **/
	public int maxSpritesInBatch = 0;

	/**
	 * Constructs a new SpriteBatch with a size of 1000, one buffer, and the
	 * default shader.
	 *
	 * @see SpriteBatch#SpriteBatch(int, ShaderProgram)
	 */
	public ExtendedSpriteBatch()
	{
		this(1000, null);
	}

	/**
	 * Constructs a SpriteBatch with one buffer and the default shader.
	 *
	 * @see SpriteBatch#SpriteBatch(int, ShaderProgram)
	 */
	public ExtendedSpriteBatch(int size)
	{
		this(size, null);
	}

	/**
	 * Constructs a new SpriteBatch. Sets the projection matrix to an
	 * orthographic projection with y-axis point upwards, x-axis point to the
	 * right and the origin being in the bottom left corner of the screen. The
	 * projection will be pixel perfect with respect to the current screen
	 * resolution.
	 * <p>
	 * The defaultShader specifies the shader to use. Note that the names for
	 * uniforms for this default shader are different than the ones expect for
	 * shaders set with {@link #setShader(ShaderProgram)}. See
	 * {@link #createShader()}.
	 *
	 * @param size
	 *            The max number of sprites in a single batch. Max of 5460.
	 * @param defaultShader
	 *            The default shader to use. This is not owned by the
	 *            SpriteBatch and must be disposed separately.
	 */
	public ExtendedSpriteBatch(int size, ShaderProgram defaultShader)
	{
		// 32767 is max index, so 32767 / 6 - (32767 / 6 % 3) = 5460.
		if (size > 5460)
		{
			throw new IllegalArgumentException("Can't have more than 5460 sprites per batch: " + size);
		}

		Mesh.VertexDataType vertexDataType = Mesh.VertexDataType.VertexArray;
		if (Gdx.gl30 != null)
		{
			vertexDataType = Mesh.VertexDataType.VertexBufferObjectWithVAO;
		}
		this.mesh = new Mesh(vertexDataType, false, size * 4, size * 6, new VertexAttribute(Usage.Position, 2, ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE), new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"), new VertexAttribute(Usage.Generic, 1, GRAYSCALE_ATTRIBUTE), new VertexAttribute(Usage.ColorPacked, 4, ADDITIVE_TINT_ATTRIBUTE));

		this.projectionMatrix.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

		this.valuesPerVertice = 7;
		this.verticesPerSprite = this.valuesPerVertice * 4;

		this.vertices = new float[size * this.verticesPerSprite];

		int len = size * 6;
		short[] indices = new short[len];
		short j = 0;
		for (int i = 0; i < len; i += 6, j += 4)
		{
			indices[i] = j;
			indices[i + 1] = (short) (j + 1);
			indices[i + 2] = (short) (j + 2);
			indices[i + 3] = (short) (j + 2);
			indices[i + 4] = (short) (j + 3);
			indices[i + 5] = j;
		}
		this.mesh.setIndices(indices);

		if (defaultShader == null)
		{
			this.shader = createShader();
			this.ownsShader = true;
		}
		else
		{
			this.shader = defaultShader;
		}
	}

	/**
	 * Returns a customized default shader that includes ambient lights
	 * (uniform) and per-vertex additive tinting and per-vertex grayscale
	 */
	static public ShaderProgram createShader()
	{
		String vertexShader = "" //
				+ "attribute vec4 " + ShaderProgram.POSITION_ATTRIBUTE + ";\n" //
				+ "attribute vec4 " + ShaderProgram.COLOR_ATTRIBUTE + ";\n" //
				+ "attribute vec2 " + ShaderProgram.TEXCOORD_ATTRIBUTE + "0;\n" //
				+ "attribute float " + GRAYSCALE_ATTRIBUTE + ";\n" //
				+ "attribute vec4 " + ADDITIVE_TINT_ATTRIBUTE + ";\n" //
				+ "uniform mat4 u_projTrans;\n" //
				+ "varying vec4 v_color;\n" //
				+ "varying vec2 v_texCoords;\n" //
				+ "varying float v_grayScaleFactor;\n" //
				+ "varying vec4 v_additiveTint;\n" //
				+ "\n" //
				+ "void main()\n" //
				+ "{\n" //
				+ "   v_color = " + ShaderProgram.COLOR_ATTRIBUTE + ";\n" //
				+ "   v_color.a = v_color.a * (255.0/254.0);\n" //
				+ "   v_texCoords = " + ShaderProgram.TEXCOORD_ATTRIBUTE + "0;\n" //
				+ "   v_grayScaleFactor = " + GRAYSCALE_ATTRIBUTE + ";\n" //
				+ "   v_additiveTint = " + ADDITIVE_TINT_ATTRIBUTE + ";\n" //
				+ "   gl_Position =  u_projTrans * " + ShaderProgram.POSITION_ATTRIBUTE + ";\n" //
				+ "}\n";

		String fragmentShader = "" //
				+ "#ifdef GL_ES\n" //
				+ "#define LOWP lowp\n" //
				+ "precision mediump float;\n" //
				+ "#else\n" //
				+ "#define LOWP \n" //
				+ "#endif\n" //
				+ "varying LOWP vec4 v_color;\n" //
				+ "varying vec2 v_texCoords;\n" //
				+ "varying float v_grayScaleFactor;\n" //
				+ "varying vec4 v_additiveTint;\n" //
				+ "uniform sampler2D u_texture;\n" //
				+ "uniform float u_saturation;\n" //
				+ "uniform vec4 " + AMBIENT_COLOR_UNIFORM + ";\n" //
				+ "vec3 rgb2hsv(vec3 c);\n" //
				+ "vec3 hsv2rgb(vec3 c);\n" //
				+ "void main()\n"//
				+ "{\n" //
				+ "  vec4 color = v_color * texture2D(u_texture, v_texCoords);\n" //
				+ "  color.rgb = color.rgb + v_additiveTint.rgb * v_additiveTint.a;\n" //
				+ "  color = color * " + AMBIENT_COLOR_UNIFORM + ";\n" //
				+ "	 float gray = dot(color.rgb, vec3(0.299, 0.587, 0.114)) * v_grayScaleFactor;\n" //
				+ "  float invFactor = 1.0 - v_grayScaleFactor;\n" //
				+ "  color.rgb = vec3(gray + invFactor * color.r, gray + invFactor * color.g, gray + invFactor * color.b);\n" //
				+ "  vec3 hsvColor = rgb2hsv(color.rgb);\r\n" //
				+ "	 hsvColor.y *= u_saturation;\r\n" //
				+ "	 hsvColor.z *= u_saturation;\r\n" //
				+ "	 color.rgb = hsv2rgb(hsvColor);" //
				+ "  gl_FragColor = color;\n" //
				+ "}" //
				+ "vec3 rgb2hsv(vec3 c)\n" //
				+ "{\n" //
				+ "    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n" //
				+ "    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n" //
				+ "    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n" //
				+ "\n" //
				+ "    float d = q.x - min(q.w, q.y);\n" //
				+ "    float e = 1.0e-10;\n" //
				+ "    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n" //
				+ "}\n" //
				+ "vec3 hsv2rgb(vec3 c)\n" //
				+ "{\n" //
				+ "    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n" //
				+ "    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n" //
				+ "    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n" //
				+ "}";

		ShaderProgram shader = new ShaderProgram(vertexShader, fragmentShader);
		if (shader.isCompiled() == false)
		{
			throw new IllegalArgumentException("Error compiling shader: " + shader.getLog());
		}

		return shader;
	}

	@Override
	public void begin()
	{
		if (this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.end must be called before begin.");
		}
		this.renderCalls = 0;

		Gdx.gl.glDepthMask(false);
		if (this.customShader != null)
		{
			this.customShader.begin();
		}
		else
		{
			this.shader.begin();
		}

		this.shader.setUniformf(AMBIENT_COLOR_UNIFORM, this.ambientColor.r, this.ambientColor.g, this.ambientColor.b, this.ambientColor.a);
		this.shader.setUniformf("u_saturation", this.saturation);

		this.setupMatrices();

		this.drawing = true;
	}

	@Override
	public void end()
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before end.");
		}
		if (this.idx > 0)
		{
			this.flush();
		}
		this.lastTexture = null;
		this.drawing = false;

		GL20 gl = Gdx.gl;
		gl.glDepthMask(true);
		if (this.isBlendingEnabled())
		{
			gl.glDisable(GL20.GL_BLEND);
		}

		if (this.customShader != null)
		{
			this.customShader.end();
		}
		else
		{
			this.shader.end();
		}
	}

	@Override
	public void setColor(Color tint)
	{
		this.color = tint.toFloatBits();
	}

	@Override
	public void setColor(float r, float g, float b, float a)
	{
		int intBits = (int) (255 * a) << 24 | (int) (255 * b) << 16 | (int) (255 * g) << 8 | (int) (255 * r);
		this.color = NumberUtils.intToFloatColor(intBits);
	}

	@Override
	public void setColor(float color)
	{
		this.color = color;
	}

	@Override
	public Color getColor()
	{
		int intBits = NumberUtils.floatToIntColor(this.color);
		Color color = this.tempColor;
		color.r = (intBits & 0xff) / 255f;
		color.g = (intBits >>> 8 & 0xff) / 255f;
		color.b = (intBits >>> 16 & 0xff) / 255f;
		color.a = (intBits >>> 24 & 0xff) / 255f;
		return color;
	}

	@Override
	public float getPackedColor()
	{
		return this.color;
	}

	@Override
	public void draw(Texture texture, float x, float y, float originX, float originY, float width, float height, float scaleX, float scaleY, float rotation, int srcX, int srcY, int srcWidth, int srcHeight, boolean flipX, boolean flipY)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		// bottom left and top right corner points relative to origin
		final float worldOriginX = x + originX;
		final float worldOriginY = y + originY;
		float fx = -originX;
		float fy = -originY;
		float fx2 = width - originX;
		float fy2 = height - originY;

		// scale
		if (scaleX != 1 || scaleY != 1)
		{
			fx *= scaleX;
			fy *= scaleY;
			fx2 *= scaleX;
			fy2 *= scaleY;
		}

		// construct corner points, start from top left and go counter clockwise
		final float p1x = fx;
		final float p1y = fy;
		final float p2x = fx;
		final float p2y = fy2;
		final float p3x = fx2;
		final float p3y = fy2;
		final float p4x = fx2;
		final float p4y = fy;

		float x1;
		float y1;
		float x2;
		float y2;
		float x3;
		float y3;
		float x4;
		float y4;

		// rotate
		if (rotation != 0)
		{
			final float cos = MathUtils.cosDeg(rotation);
			final float sin = MathUtils.sinDeg(rotation);

			x1 = cos * p1x - sin * p1y;
			y1 = sin * p1x + cos * p1y;

			x2 = cos * p2x - sin * p2y;
			y2 = sin * p2x + cos * p2y;

			x3 = cos * p3x - sin * p3y;
			y3 = sin * p3x + cos * p3y;

			x4 = x1 + (x3 - x2);
			y4 = y3 - (y2 - y1);
		}
		else
		{
			x1 = p1x;
			y1 = p1y;

			x2 = p2x;
			y2 = p2y;

			x3 = p3x;
			y3 = p3y;

			x4 = p4x;
			y4 = p4y;
		}

		x1 += worldOriginX;
		y1 += worldOriginY;
		x2 += worldOriginX;
		y2 += worldOriginY;
		x3 += worldOriginX;
		y3 += worldOriginY;
		x4 += worldOriginX;
		y4 += worldOriginY;

		float u = srcX * this.invTexWidth;
		float v = (srcY + srcHeight) * this.invTexHeight;
		float u2 = (srcX + srcWidth) * this.invTexWidth;
		float v2 = srcY * this.invTexHeight;

		if (flipX)
		{
			float tmp = u;
			u = u2;
			u2 = tmp;
		}

		if (flipY)
		{
			float tmp = v;
			v = v2;
			v2 = tmp;
		}

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x1;
		vertices[idx++] = y1;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x2;
		vertices[idx++] = y2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x3;
		vertices[idx++] = y3;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x4;
		vertices[idx++] = y4;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(Texture texture, float x, float y, float width, float height, int srcX, int srcY, int srcWidth, int srcHeight, boolean flipX, boolean flipY)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		float u = srcX * this.invTexWidth;
		float v = (srcY + srcHeight) * this.invTexHeight;
		float u2 = (srcX + srcWidth) * this.invTexWidth;
		float v2 = srcY * this.invTexHeight;
		final float fx2 = x + width;
		final float fy2 = y + height;

		if (flipX)
		{
			float tmp = u;
			u = u2;
			u2 = tmp;
		}

		if (flipY)
		{
			float tmp = v;
			v = v2;
			v2 = tmp;
		}

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(Texture texture, float x, float y, int srcX, int srcY, int srcWidth, int srcHeight)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		final float u = srcX * this.invTexWidth;
		final float v = (srcY + srcHeight) * this.invTexHeight;
		final float u2 = (srcX + srcWidth) * this.invTexWidth;
		final float v2 = srcY * this.invTexHeight;
		final float fx2 = x + srcWidth;
		final float fy2 = y + srcHeight;

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(Texture texture, float x, float y, float width, float height, float u, float v, float u2, float v2)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		final float fx2 = x + width;
		final float fy2 = y + height;

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(Texture texture, float x, float y)
	{
		this.draw(texture, x, y, texture.getWidth(), texture.getHeight());
	}

	@Override
	public void draw(Texture texture, float x, float y, float width, float height)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		final float fx2 = x + width;
		final float fy2 = y + height;
		final float u = 0;
		final float v = 1;
		final float u2 = 1;
		final float v2 = 0;

		float color = this.color;
		int idx = this.idx;

		vertices[idx++] = x;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(Texture texture, float[] spriteVertices, int offset, int count)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		int verticesLength = this.vertices.length;
		int remainingVertices = verticesLength;
		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else
		{
			remainingVertices -= this.idx;
			if (remainingVertices == 0)
			{
				this.flush();
				remainingVertices = verticesLength;
			}
		}

		count /= 5;
		remainingVertices /= 5;

		int actualVertices = count;
		int copyCount = Math.min(remainingVertices, actualVertices);

		for (int i = 0; i < actualVertices; i++)
		{
			System.arraycopy(spriteVertices, offset, this.vertices, this.idx, 5);

			offset += 5;
			this.idx += 5;

			this.vertices[this.idx++] = this.grayScaleFactor;
			this.vertices[this.idx++] = this.additiveColor;
		}

		count -= copyCount;

		while (count > 0)
		{
			offset += copyCount * this.valuesPerVertice;

			this.flush();

			copyCount = Math.min(verticesLength / 5, count);
			System.arraycopy(spriteVertices, offset, this.vertices, 0, copyCount);

			this.idx += copyCount * 5;

			this.vertices[this.idx++] = this.grayScaleFactor;
			this.vertices[this.idx++] = this.additiveColor;

			count -= copyCount;
		}
	}

	@Override
	public void draw(TextureRegion region, float x, float y)
	{
		this.draw(region, x, y, region.getRegionWidth(), region.getRegionHeight());
	}

	@Override
	public void draw(TextureRegion region, float x, float y, float width, float height)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		Texture texture = region.getTexture();
		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		final float fx2 = x + width;
		final float fy2 = y + height;
		final float u = region.getU();
		final float v = region.getV2();
		final float u2 = region.getU2();
		final float v2 = region.getV();

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = fy2;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = fx2;
		vertices[idx++] = y;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(TextureRegion region, float x, float y, float originX, float originY, float width, float height, float scaleX, float scaleY, float rotation)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		Texture texture = region.getTexture();
		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		// bottom left and top right corner points relative to origin
		final float worldOriginX = x + originX;
		final float worldOriginY = y + originY;
		float fx = -originX;
		float fy = -originY;
		float fx2 = width - originX;
		float fy2 = height - originY;

		// scale
		if (scaleX != 1 || scaleY != 1)
		{
			fx *= scaleX;
			fy *= scaleY;
			fx2 *= scaleX;
			fy2 *= scaleY;
		}

		// construct corner points, start from top left and go counter clockwise
		final float p1x = fx;
		final float p1y = fy;
		final float p2x = fx;
		final float p2y = fy2;
		final float p3x = fx2;
		final float p3y = fy2;
		final float p4x = fx2;
		final float p4y = fy;

		float x1;
		float y1;
		float x2;
		float y2;
		float x3;
		float y3;
		float x4;
		float y4;

		// rotate
		if (rotation != 0)
		{
			final float cos = MathUtils.cosDeg(rotation);
			final float sin = MathUtils.sinDeg(rotation);

			x1 = cos * p1x - sin * p1y;
			y1 = sin * p1x + cos * p1y;

			x2 = cos * p2x - sin * p2y;
			y2 = sin * p2x + cos * p2y;

			x3 = cos * p3x - sin * p3y;
			y3 = sin * p3x + cos * p3y;

			x4 = x1 + (x3 - x2);
			y4 = y3 - (y2 - y1);
		}
		else
		{
			x1 = p1x;
			y1 = p1y;

			x2 = p2x;
			y2 = p2y;

			x3 = p3x;
			y3 = p3y;

			x4 = p4x;
			y4 = p4y;
		}

		x1 += worldOriginX;
		y1 += worldOriginY;
		x2 += worldOriginX;
		y2 += worldOriginY;
		x3 += worldOriginX;
		y3 += worldOriginY;
		x4 += worldOriginX;
		y4 += worldOriginY;

		final float u = region.getU();
		final float v = region.getV2();
		final float u2 = region.getU2();
		final float v2 = region.getV();

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x1;
		vertices[idx++] = y1;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x2;
		vertices[idx++] = y2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x3;
		vertices[idx++] = y3;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x4;
		vertices[idx++] = y4;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(TextureRegion region, float x, float y, float originX, float originY, float width, float height, float scaleX, float scaleY, float rotation, boolean clockwise)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		Texture texture = region.getTexture();
		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		// bottom left and top right corner points relative to origin
		final float worldOriginX = x + originX;
		final float worldOriginY = y + originY;
		float fx = -originX;
		float fy = -originY;
		float fx2 = width - originX;
		float fy2 = height - originY;

		// scale
		if (scaleX != 1 || scaleY != 1)
		{
			fx *= scaleX;
			fy *= scaleY;
			fx2 *= scaleX;
			fy2 *= scaleY;
		}

		// construct corner points, start from top left and go counter clockwise
		final float p1x = fx;
		final float p1y = fy;
		final float p2x = fx;
		final float p2y = fy2;
		final float p3x = fx2;
		final float p3y = fy2;
		final float p4x = fx2;
		final float p4y = fy;

		float x1;
		float y1;
		float x2;
		float y2;
		float x3;
		float y3;
		float x4;
		float y4;

		// rotate
		if (rotation != 0)
		{
			final float cos = MathUtils.cosDeg(rotation);
			final float sin = MathUtils.sinDeg(rotation);

			x1 = cos * p1x - sin * p1y;
			y1 = sin * p1x + cos * p1y;

			x2 = cos * p2x - sin * p2y;
			y2 = sin * p2x + cos * p2y;

			x3 = cos * p3x - sin * p3y;
			y3 = sin * p3x + cos * p3y;

			x4 = x1 + (x3 - x2);
			y4 = y3 - (y2 - y1);
		}
		else
		{
			x1 = p1x;
			y1 = p1y;

			x2 = p2x;
			y2 = p2y;

			x3 = p3x;
			y3 = p3y;

			x4 = p4x;
			y4 = p4y;
		}

		x1 += worldOriginX;
		y1 += worldOriginY;
		x2 += worldOriginX;
		y2 += worldOriginY;
		x3 += worldOriginX;
		y3 += worldOriginY;
		x4 += worldOriginX;
		y4 += worldOriginY;

		float u1, v1, u2, v2, u3, v3, u4, v4;
		if (clockwise)
		{
			u1 = region.getU2();
			v1 = region.getV2();
			u2 = region.getU();
			v2 = region.getV2();
			u3 = region.getU();
			v3 = region.getV();
			u4 = region.getU2();
			v4 = region.getV();
		}
		else
		{
			u1 = region.getU();
			v1 = region.getV();
			u2 = region.getU2();
			v2 = region.getV();
			u3 = region.getU2();
			v3 = region.getV2();
			u4 = region.getU();
			v4 = region.getV2();
		}

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x1;
		vertices[idx++] = y1;
		vertices[idx++] = color;
		vertices[idx++] = u1;
		vertices[idx++] = v1;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x2;
		vertices[idx++] = y2;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x3;
		vertices[idx++] = y3;
		vertices[idx++] = color;
		vertices[idx++] = u3;
		vertices[idx++] = v3;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x4;
		vertices[idx++] = y4;
		vertices[idx++] = color;
		vertices[idx++] = u4;
		vertices[idx++] = v4;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void draw(TextureRegion region, float width, float height, Affine2 transform)
	{
		if (!this.drawing)
		{
			throw new IllegalStateException("SpriteBatch.begin must be called before draw.");
		}

		float[] vertices = this.vertices;

		Texture texture = region.getTexture();
		if (texture != this.lastTexture)
		{
			this.switchTexture(texture);
		}
		else if (this.idx == vertices.length)
		{
			this.flush();
		}

		// construct corner points
		float x1 = transform.m02;
		float y1 = transform.m12;
		float x2 = transform.m01 * height + transform.m02;
		float y2 = transform.m11 * height + transform.m12;
		float x3 = transform.m00 * width + transform.m01 * height + transform.m02;
		float y3 = transform.m10 * width + transform.m11 * height + transform.m12;
		float x4 = transform.m00 * width + transform.m02;
		float y4 = transform.m10 * width + transform.m12;

		float u = region.getU();
		float v = region.getV2();
		float u2 = region.getU2();
		float v2 = region.getV();

		float color = this.color;
		int idx = this.idx;
		vertices[idx++] = x1;
		vertices[idx++] = y1;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x2;
		vertices[idx++] = y2;
		vertices[idx++] = color;
		vertices[idx++] = u;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x3;
		vertices[idx++] = y3;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v2;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		vertices[idx++] = x4;
		vertices[idx++] = y4;
		vertices[idx++] = color;
		vertices[idx++] = u2;
		vertices[idx++] = v;
		vertices[idx++] = this.grayScaleFactor;
		vertices[idx++] = this.additiveColor;

		this.idx = idx;
	}

	@Override
	public void flush()
	{
		if (this.idx == 0)
		{
			return;
		}

		this.renderCalls++;
		this.totalRenderCalls++;
		int spritesInBatch = this.idx / this.verticesPerSprite;
		if (spritesInBatch > this.maxSpritesInBatch)
		{
			this.maxSpritesInBatch = spritesInBatch;
		}
		int count = spritesInBatch * 6;

		this.lastTexture.bind();
		Mesh mesh = this.mesh;
		mesh.setVertices(this.vertices, 0, this.idx);
		mesh.getIndicesBuffer().position(0);
		mesh.getIndicesBuffer().limit(count);

		if (this.blendingDisabled)
		{
			Gdx.gl.glDisable(GL20.GL_BLEND);
		}
		else
		{
			Gdx.gl.glEnable(GL20.GL_BLEND);
			if (this.blendSrcFunc != -1)
			{
				Gdx.gl.glBlendFunc(this.blendSrcFunc, this.blendDstFunc);
			}
		}

		this.shader.setUniformf(AMBIENT_COLOR_UNIFORM, this.ambientColor.r, this.ambientColor.g, this.ambientColor.b, this.ambientColor.a);

		mesh.render(this.customShader != null ? this.customShader : this.shader, GL20.GL_TRIANGLES, 0, count);

		this.idx = 0;
	}

	@Override
	public void disableBlending()
	{
		if (this.blendingDisabled)
		{
			return;
		}
		this.flush();
		this.blendingDisabled = true;
	}

	@Override
	public void enableBlending()
	{
		if (!this.blendingDisabled)
		{
			return;
		}
		this.flush();
		this.blendingDisabled = false;
	}

	@Override
	public void setBlendFunction(int srcFunc, int dstFunc)
	{
		if (this.blendSrcFunc == srcFunc && this.blendDstFunc == dstFunc)
		{
			return;
		}
		this.flush();
		this.blendSrcFunc = srcFunc;
		this.blendDstFunc = dstFunc;
	}

	@Override
	public int getBlendSrcFunc()
	{
		return this.blendSrcFunc;
	}

	@Override
	public int getBlendDstFunc()
	{
		return this.blendDstFunc;
	}

	@Override
	public void dispose()
	{
		this.mesh.dispose();
		if (this.ownsShader && this.shader != null)
		{
			this.shader.dispose();
		}
	}

	@Override
	public Matrix4 getProjectionMatrix()
	{
		return this.projectionMatrix;
	}

	@Override
	public Matrix4 getTransformMatrix()
	{
		return this.transformMatrix;
	}

	@Override
	public void setProjectionMatrix(Matrix4 projection)
	{
		if (this.drawing)
		{
			this.flush();
		}
		this.projectionMatrix.set(projection);
		if (this.drawing)
		{
			this.setupMatrices();
		}
	}

	@Override
	public void setTransformMatrix(Matrix4 transform)
	{
		if (this.drawing)
		{
			this.flush();
		}
		this.transformMatrix.set(transform);
		if (this.drawing)
		{
			this.setupMatrices();
		}
	}

	private void setupMatrices()
	{
		this.combinedMatrix.set(this.projectionMatrix).mul(this.transformMatrix);
		if (this.customShader != null)
		{
			this.customShader.setUniformMatrix("u_projTrans", this.combinedMatrix);
			this.customShader.setUniformi("u_texture", 0);
		}
		else
		{
			this.shader.setUniformMatrix("u_projTrans", this.combinedMatrix);
			this.shader.setUniformi("u_texture", 0);
		}
	}

	protected void switchTexture(Texture texture)
	{
		this.flush();

		this.totalTextureSwitches++;

		this.lastTexture = texture;
		this.invTexWidth = 1.0f / texture.getWidth();
		this.invTexHeight = 1.0f / texture.getHeight();
	}

	@Override
	public void setShader(ShaderProgram shader)
	{
		if (this.drawing)
		{
			this.flush();
			if (this.customShader != null)
			{
				this.customShader.end();
			}
			else
			{
				this.shader.end();
			}
		}
		this.customShader = shader;
		if (this.drawing)
		{
			if (this.customShader != null)
			{
				this.customShader.begin();
			}
			else
			{
				this.shader.begin();
			}
			this.setupMatrices();
		}
	}

	@Override
	public ShaderProgram getShader()
	{
		if (this.customShader == null)
		{
			return this.shader;
		}
		return this.customShader;
	}

	@Override
	public boolean isBlendingEnabled()
	{
		return !this.blendingDisabled;
	}

	@Override
	public boolean isDrawing()
	{
		return this.drawing;
	}

	@Override
	public float getGrayScaleFactor()
	{
		return this.grayScaleFactor;
	}

	@Override
	public void setGrayScaleFactor(float grayScaleFactor)
	{
		this.grayScaleFactor = grayScaleFactor;
	}

	@Override
	public float getAdditiveColor()
	{
		return this.additiveColor;
	}

	@Override
	public void setAdditiveColor(float additiveColorBits)
	{
		this.additiveColor = additiveColorBits;
	}

	public void setAdditiveColor(float r, float g, float b, float a)
	{
		int intBits = (int) (255 * a) << 24 | (int) (255 * b) << 16 | (int) (255 * g) << 8 | (int) (255 * r);
		this.additiveColor = NumberUtils.intToFloatColor(intBits);
	}

	@Override
	public void setAdditiveColor(Color color)
	{
		this.additiveColor = color.toFloatBits();
	}

	@Override
	public void setAmbientColor(float r, float g, float b, float a)
	{
		this.ambientColor.set(r, g, b, a);
	}

	@Override
	public void setAmbientColor(Color color)
	{
		this.ambientColor.set(color);
	}

	@Override
	public Color getAmbientColor()
	{
		return this.ambientColor;
	}

	@Override
	public float getSaturation()
	{
		return this.saturation;
	}

	@Override
	public void setSaturation(float saturation)
	{
		this.saturation = saturation;

		this.shader.setUniformf("u_saturation", saturation);
	}
}
