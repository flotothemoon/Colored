package com.unlogical.linked.resources.font;

import java.awt.Font;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.TrueTypeFont;

import com.unlogical.linked.util.Renderer;
import com.unlogical.linked.util.ShaderHandler;

public class Fonts
{
	private static Font font = new Font("Times", Font.PLAIN, 34);
	private static Font smallFont = font.deriveFont(24.0f); // typematching is a
															// b1tch sometimes
	private static Font fontBold = font.deriveFont(Font.BOLD);
	private static Font smallFontBold = smallFont.deriveFont(Font.BOLD);
	private static TrueTypeFont gameFont;
	private static TrueTypeFont smallGameFont;
	private static TrueTypeFont boldGameFont;
	private static TrueTypeFont smallBoldGameFont;

	private static final List<String> lines = new ArrayList<String>();

	public static void init()
	{
		gameFont = new TrueTypeFont(font, true);
		smallGameFont = new TrueTypeFont(smallFont, true);
		boldGameFont = new TrueTypeFont(fontBold, true);
		smallBoldGameFont = new TrueTypeFont(smallFontBold, true);
	}

	public static void drawFancy(String text, TrueTypeFont font, Color color, float x, float y, float width, float height, boolean centerVertically, boolean centerHorizontally, Graphics g)
	{
		text = text.replaceAll("\\s+", " "); // clean text

		List<String> words = text.contains(" ") ? Arrays.asList(text.split(" ")) : Arrays.asList(text);
		lines.clear();

		String currentLine = "";

		for (int i = 0; i < words.size(); i++)
		{
			boolean addedWord = false;

			String word = words.get(i);

			if (font.getWidth(currentLine + word) > width)
			{
				if (!currentLine.isEmpty())
				{
					lines.add(currentLine.substring(0, currentLine.length()));

					currentLine = word + " ";

					addedWord = true;
				}
				else
				{
					currentLine = "";
				}
			}
			else if (i == words.size() - 1)
			{
				lines.add(currentLine.substring(0, currentLine.length()) + word);

				addedWord = true;
			}

			if (!addedWord)
			{
				currentLine += word + " ";
			}
		}

		ShaderHandler.disableLighting();

		g.setFont(font);
		g.setColor(color);

		float startY = y;
		float ySpacing = -2.0f;
		float currentY = startY;

		for (int i = 0; i < lines.size(); i++)
		{
			String line = lines.get(i);

			g.drawString(line, x, currentY);

			currentY += font.getHeight() + ySpacing;
		}

		Renderer.bindTexture(null);
	}

	public static TrueTypeFont getDefaultFont()
	{
		return gameFont;
	}

	public static TrueTypeFont getSmallFont()
	{
		return smallGameFont;
	}

	public static TrueTypeFont getBoldDefaultFont()
	{
		return boldGameFont;
	}

	public static TrueTypeFont getSmallBoldFont()
	{
		return smallBoldGameFont;
	}
}
