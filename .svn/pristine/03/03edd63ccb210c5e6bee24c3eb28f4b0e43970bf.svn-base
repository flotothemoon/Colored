package com.unlogical.colored.particle;

import java.util.Random;

import org.newdawn.slick.Color;

public enum ColorDistributionMode implements IColorDistributionMode
{	
	LINEAR()
	{
		@Override
		public Color getColor(Color startColor, Color endColor, Random rng)
		{
			float rngFloat = rng.nextFloat();
			
			colorBuffer.r = Math.min(startColor.r, endColor.r) + rngFloat * (Math.abs(endColor.r - startColor.r));
			colorBuffer.g = Math.min(startColor.g, endColor.g) + rngFloat * (Math.abs(endColor.g - startColor.g));
			colorBuffer.b = Math.min(startColor.b, endColor.b) + rngFloat * (Math.abs(endColor.b - startColor.b));

			return colorBuffer;
		}
	},
	
	RGB_SQUARE()
	{
		@Override
		public Color getColor(Color startColor, Color endColor, Random rng)
		{
			colorBuffer.r = Math.min(startColor.r, endColor.r) + rng.nextFloat() * (Math.abs(endColor.r - startColor.r));
			colorBuffer.g = Math.min(startColor.g, endColor.g) + rng.nextFloat() * (Math.abs(endColor.g - startColor.g));
			colorBuffer.b = Math.min(startColor.b, endColor.b) + rng.nextFloat() * (Math.abs(endColor.b - startColor.b));

			return colorBuffer;
		}
	},
	
	HSV_SQUARE()
	{
		@Override
		public Color getColor(Color startColor, Color endColor, Random rng)
		{
			return startColor;
		}
	},
	
	;
	
	private static Color colorBuffer = new Color(1.0f, 1.0f, 1.0f);
}
