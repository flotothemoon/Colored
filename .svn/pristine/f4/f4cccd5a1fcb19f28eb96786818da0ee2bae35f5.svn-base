package com.unlogical.colored;

/*
 * - dimensions:
 * 
 *   independent
 *   time delay
 *	 time scale
 *   reversal
 *    
 * TODO:
 *       
 * - FIXME collision prediction for normal tiles sometimes glitches out when approaching from certain angle (45)
 * - FIXME collisions with advanced tiles glitch out sometimes when they are moving (prediction not working?)
 * - FIXME map sometimes moves too far out when moving on something with slowdown and small black area becomes visible inmap (seems to be both, vertically and horizontally)
 * - FIXME events not cleared so an interaction event can be fired even if the key was initially just pressed a minute ago (interaction glitch)
 *   
 * - make not straight and every polygon (4 cornered) hitbox (stairs, etc.) work
 * 
 * - change distancetotile**** for non-straight tiles and take first point where it intersects
 * 
 * - maps linked to each other via doors
 * 
 * - music for whole world, not just level (for "instant" loading when switching between levels)
 * 
 * - better debug mode (gui; not just text)
 *  
 * - add info when clicking in userinputfield
 * 
 * - add ability to mapeditor to be able to "jump" to the linked level somehow by clicking the linkedTile
 * 
 * - "schizophrenic" character, two minds, turning that the player is actually (partially) the bad guy
 * - visibile in backgrounds and textures (dark and good side)
 *   
 * - change hitbox detection to work with non-straight hitboxes
 *  
 * - worlds as maps where you can select which map to go
 * 
 * - add special animations triggerable by advancedtiles (like destruction)
 * - add animations for destruction of objects
 * 
 * - calculate animationspeed out of methods depending on action and velocity etc
 *    
 * - remove resolutions option
 * - smooth map moving
 * - when spawned on spawnpoint instantly move everything to fit
 * 
 * - add thunderstorms
 * 
 * - interface for jumppad (scale y velocity with win value), ejectible (by cannons and similar things; see render modes)
 *    
 * - button images (buffered hashmap for buttonlabel)
 *    
 * - add possibility to change hitbox depending on the current action (table?), entitiy
 *    
 * - better ways for climbing ladders and climbables (ability to just not climb)
 *   (change controls?; cimbable only for player with arrow keys; jump only for water)
 *    
 * - add render modes (to limit the image rendering vertically, horizontally or both; for platforms that slowly appear out of cannons)
 *    
 * - better sound system (ambient.rain, player.climbladder, terrain.water.slpash, ...); 
 * - add sounds for ambient: (thunder, rain, wind, storm, enemies, jump, ladder, climb) 
 * 
 * - make settings work while in game
 *    
 * - add cloud platforms
 * - add cannons and things that "shoot" platforms
 *       
 * - add custom mouse cursor 
 * 
 * - add wooden cages for lums (no key required) and iron cages (key required) and signal required iron cages
 * - add climbable walls
 * - add conveyer belts
 * - add stairs
 * - add keys (as entity) 
 * - add key effected blocks (if all keys collected or if a certain key is collected and put right)
 * - add grass/flowers etc (high grass, bushes).
 * - add more types of ladders
 * - add lanterns (raw and on "stick")
 * - add bullets/"cannons", bullets and cannons that chase you
 * 
 * - add proper detection if advancedtiles are nearby
 *   
 * - add weather condition to options when creating map (bit rainy, rainy, strong rain, thunderstorm, snowfall) and in what layer it is
 * 
 * - update mapcreationmenu
 * - add edit map settings option to mapeditormenu
 * 
 * - remove texture filters and linear scaling (hd textures!)
 *  
 * - add proper creating map and loading screen (just in case the loading takes longer than estimated)
 * 
 * - add falling/vanishing platforms (with respawning after cooldown)
 * 
 * - implement storyline (scripted)
 * 
 * - lots of riddles (medium difficult to very difficult)
 * 
 * - performance improvements
 * 
 * - game start in fullscreen, two logos instead of loading screen (game logo, team logo) (to hide startup loading ^^)
 * - replace startup loading screen with logos of team/company and game (in that order) 
 */

import java.io.File;
import java.lang.ProcessBuilder.Redirect;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.TrueTypeFont;

import com.unlogical.colored.debug.Debug;
import com.unlogical.colored.entity.Entity;
import com.unlogical.colored.entity.property.EntityProperties;
import com.unlogical.colored.filesystem.ConfigFileHandler;
import com.unlogical.colored.filesystem.FileHandle;
import com.unlogical.colored.filesystem.FileManager;
import com.unlogical.colored.filesystem.FilePaths;
import com.unlogical.colored.filesystem.files.WrapperTextureHandler;
import com.unlogical.colored.gui.menu.MenuDisplay;
import com.unlogical.colored.gui.panel.CakePanel;
import com.unlogical.colored.gui.panel.CheatPanel;
import com.unlogical.colored.gui.panel.PerformancePanel;
import com.unlogical.colored.gui.panel.SanityPanel;
import com.unlogical.colored.gui.screen.CreditsScreen;
import com.unlogical.colored.input.InputHandler;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.levelmanaging.LevelManager;
import com.unlogical.colored.mapeditor.MapEditor;
import com.unlogical.colored.particle.EmitterType;
import com.unlogical.colored.resources.ResourceLoader;
import com.unlogical.colored.resources.font.Fonts;
import com.unlogical.colored.saving.SaveHandler;
import com.unlogical.colored.saving.SaveState;
import com.unlogical.colored.terrain.TerrainObject;
import com.unlogical.colored.terrain.tile.TileBase;
import com.unlogical.colored.terrain.tile.TileDoor;
import com.unlogical.colored.terrain.tile.TileMarker;
import com.unlogical.colored.terrain.tile.TileText;
import com.unlogical.colored.util.CursorType;
import com.unlogical.colored.util.GameStatus;
import com.unlogical.colored.util.LoadingHandler;
import com.unlogical.colored.util.NotePrinter;
import com.unlogical.colored.util.RealImage;
import com.unlogical.colored.util.Renderer;
import com.unlogical.colored.util.ShaderHandler;
import com.unlogical.colored.util.ZHandler;
import com.unlogical.colored.wrapper.WrapperTexture;

public class GameLauncher extends BasicGame
{
	public static final int TARGET_WIDTH = 1920;
	public static final int TARGET_HEIGHT = 1080;

	public static final float TARGET_RATIO = ((float) TARGET_WIDTH) / ((float) TARGET_HEIGHT);

	private static int targetFPS = 60;
	private static int delta;

	private static long lastUpdate = System.nanoTime();
	private static long totalTime;
	private static long updateTime;
	private static long renderTime;
	private static long unspecifiedTime;
	private static long idleTime;
	private static long lastControlledTime;

	private static boolean demoMode = false;
	private static boolean developerMode = true;
	private static boolean lockFPS = true;
	private static boolean vSync = true;
	private static boolean fullscreen = !developerMode;
	private static boolean focused;
	private static boolean continueLastSession = true;

	public static final String GAME_NAME = "Colored" + (demoMode ? " Demo" : "");

	private static BuildInfo buildInfo;

	private static Level levelContext;

	private static RealImage compLogo;

	private static PerformancePanel performancePanel;
	private static CakePanel cakePanel;
	private static SanityPanel sanityPanel;
	private static CheatPanel cheatPanel;

	private static GameStatus status;
	private static AppGameContainer gameContainer;

	public GameLauncher(String title)
	{
		super(title);
	}

	// default: -Xms512M -Xmx1G
	public static void main(String[] args)
	{
		try
		{
			checkLaunchPermission();

			processArgs();

			Debug.log("\n\n[Started " + GAME_NAME + " " + new SimpleDateFormat("dd/MM/yy HH:mm:ss").format(Calendar.getInstance().getTime()) + "]");
			Debug.log("Starting launcher...");

			debugRuntimeLocation();

			readBuildInfo();

			Debug.log("Build: " + buildInfo.name + " from " + buildInfo.date);

			gameContainer = new AppGameContainer(new GameLauncher(GAME_NAME + " " + (developerMode ? " [Developer View | Build: " + buildInfo.name + "]" : "")));
			gameContainer.setIcons(new String[] { "res/textures/misc/icon-16x16.png", "res/textures/misc/icon-32x32.png" });
			setDisplayMode(TARGET_WIDTH, TARGET_HEIGHT, fullscreen);

			if (lockFPS)
			{
				lockFPS(targetFPS);
			}

			if (vSync)
			{
				gameContainer.setVSync(true);
			}

			Display.setResizable(true);

			gameContainer.setAlwaysRender(true);
			gameContainer.setShowFPS(false);

			Debug.log("Starting display...");

			gameContainer.start();
		}
		catch (Exception e)
		{
			Debug.warn("Unable to start game: " + e, e);
		}
	}

	@Override
	public void init(GameContainer container)
	{
		setStatus(GameStatus.LOADING);

		CursorType.useCursor(CursorType.DEFAULT, container);

		try
		{
			compLogo = new RealImage("res/compLogo.png");

			Debug.log("Logos loaded.");
		}
		catch (Exception e)
		{
			throw new RuntimeException("Damnit. Can't even load two simple images. Damnit! DAMNIT! (" + e + ")", e);
		}

		ShaderHandler.init0();
		Fonts.init();
		Renderer.reScale(container);

		performancePanel = new PerformancePanel(0, GameLauncher.getHeight() - 250, 600, 250);
		cakePanel = new CakePanel(GameLauncher.getWidth() - 400, GameLauncher.getHeight() - 400, 400, 400);
		sanityPanel = new SanityPanel(GameLauncher.getWidth() / 2 - 400, GameLauncher.getHeight() / 2 - 250, 800, 500);
		cheatPanel = new CheatPanel(GameLauncher.getWidth() / 2 - 400, GameLauncher.getHeight() / 2 - 200, 800, 400);

		performancePanel.setActive(developerMode);
		cakePanel.setActive(developerMode);
		sanityPanel.setActive(developerMode);
		cheatPanel.setActive(false);

		performancePanel.setShown(false);
		cakePanel.setShown(false);
		sanityPanel.setShown(false);
		cheatPanel.setShown(false);
	}

	@Override
	public void update(GameContainer container, int delta) throws SlickException
	{
		idleTime = System.nanoTime() - lastControlledTime;

		cheatPanel.update(container, delta);

		long beforeUpdate = System.nanoTime();

		totalTime = System.nanoTime() - lastUpdate;
		lastUpdate = System.nanoTime();

		if (developerMode)
		{
			boolean lockInput = MapEditor.isLockingInput() || cheatPanel.isActive();

			sanityPanel.update(container, delta);

			if (container.getInput().isKeyDown(Input.KEY_F4))
			{
				delta /= 2;
			}
			else if (container.getInput().isKeyDown(Input.KEY_F6))
			{
				delta *= 2;
			}

			if (!container.getInput().isKeyDown(Input.KEY_LCONTROL) && !lockInput)
			{
				if (container.getInput().isKeyPressed(Input.KEY_P))
				{
					if (container.getInput().isKeyDown(Input.KEY_LALT))
					{
						cakePanel.setShown(!cakePanel.isShown());
					}
					else
					{
						performancePanel.setShown(!performancePanel.isShown());
					}
				}
			}

			if (container.getInput().isKeyPressed(Input.KEY_F2))
			{
				sanityPanel.setShown(true);
				sanityPanel.setActive(true);
			}

			if (container.getInput().isKeyPressed(Input.KEY_F8))
			{
				cheatPanel.setShown(true);
				cheatPanel.setActive(true);
			}

			if (!lockInput)
			{
				if (container.getInput().isKeyPressed(Input.KEY_L))
				{
					ShaderHandler.toggleLighting();
				}

				if (container.getInput().isKeyPressed(Input.KEY_T))
				{
					TileText.toggleText();
				}

				if (container.getInput().isKeyPressed(Input.KEY_O))
				{
					TileMarker.toggleMarkers();
				}

				if (container.getInput().isKeyPressed(Input.KEY_B))
				{
					TileBase.toggleBases();
				}

				if (container.getInput().isKeyPressed(Input.KEY_COMMA))
				{
					NotePrinter.printNotes();
				}

				if (container.getInput().isKeyPressed(Input.KEY_E))
				{
					reloadAll();
				}
			}
		}

		GameLauncher.delta = delta;

		if (focused != gameContainer.hasFocus())
		{
			if (gameContainer.hasFocus())
			{
				Debug.log("Game focused.");
			}
			else
			{
				Debug.log("Game not focused anymore.");

				// if (status == GameStatus.IN_MAP)
				// {
				// status = GameSdtatus.PAUSE_MENU;
				// LevelRenderer.pause();
				// }
			}

			focused = gameContainer.hasFocus();
		}

		Renderer.update(container, delta);
		ZHandler.update(delta);
		InputHandler.update(delta, container);

		if (status == GameStatus.MAP_EDITOR)
		{
			MapEditor.update(container, delta);
		}
		else if (status == GameStatus.IN_LEVEL || status == GameStatus.PAUSE_MENU)
		{
			LevelManager.update(container, delta);
		}
		else if (status == GameStatus.CREDITS)
		{
			CreditsScreen.update(container, delta);
		}

		if (container.getInput().isKeyPressed(Input.KEY_F10))
		{
			fullscreen = !fullscreen;

			try
			{
				setDisplayMode(TARGET_WIDTH, TARGET_HEIGHT, fullscreen);

				Debug.log("Game is now running in " + (fullscreen ? "FULLSCREEN" : "WINDOWED (" + Display.getWidth() + " x " + Display.getHeight() + ")") + " mode.");
			}
			catch (Exception e)
			{
				Debug.warn("Failed to set display mode to " + TARGET_WIDTH + ", " + TARGET_HEIGHT + ", fs=" + fullscreen + ": " + e, e);
			}
		}

		if (levelContext != null && container.getInput().isKeyPressed(Input.KEY_F12))
		{
			levelContext.saveToActiveSave();
			MenuDisplay.displaySavedMessage();
		}

		if (status == GameStatus.LOADING)
		{
			if (LoadingHandler.hasFinishedLoading())
			{
				if (continueLastSession)
				{
					goToLastVisitedLevel();
				}
				else
				{
					status = GameStatus.MAIN_MENU;
				}
			}

			LoadingHandler.update(delta);
		}
		else
		{
			MenuDisplay.update(container, delta);
		}

		performancePanel.update(container, delta);

		clearRecords();

		updateTime = System.nanoTime() - beforeUpdate;

		cakePanel.update(container, delta);
	}

	@Override
	public void render(GameContainer container, Graphics g)
	{
		try
		{
			long beforeRender = System.nanoTime();

			Renderer.initRender();

			g.setFont(Fonts.getDefaultFont());
			g.setLineWidth(2.0f);

			if (status == GameStatus.LOADING)
			{
				g.drawImage(compLogo, container.getWidth() / 2 - compLogo.getWidth() / 2, container.getHeight() / 2 - compLogo.getHeight() / 2);

				// g.setFont(getSmallFont());
				// g.setColor(ColorHelper.applyAlphaAndCopy(MapEditor.panelColor,
				// 0.5f));
				// g.drawString(LoadingHandler.getLastItem(),
				// GameLauncher.getWidth() / 2 -
				// g.getFont().getWidth(LoadingHandler.getLastItem()) / 2,
				// GameLauncher.getHeight() - 50 - g.getFont().getLineHeight());
			}
			else if (status == GameStatus.IN_LEVEL || status == GameStatus.PAUSE_MENU)
			{
				LevelManager.render(container, g);
			}
			else if (status == GameStatus.MAP_EDITOR)
			{
				MapEditor.render(container, g);
			}
			else if (status == GameStatus.CREDITS)
			{
				CreditsScreen.render(g);
			}

			if (status != GameStatus.LOADING)
			{
				MenuDisplay.render(container, g);
			}

			performancePanel.render(container, 1.0f, g);

			renderTime = System.nanoTime() - beforeRender;
		}
		catch (Exception e)
		{
			Debug.warn("Error while " + (status == GameStatus.LOADING ? "loading" : "rendering") + ", trying to continue...", e);

			if (SanityPanel.isRunningCheck())
			{
				sanityPanel.onError(e);
			}
		}

		if (!LoadingHandler.hasFinishedLoading())
		{
			LoadingHandler.loadNext();
		}

		unspecifiedTime = totalTime - renderTime - updateTime - idleTime;

		cakePanel.storeCurrentValues();
		cakePanel.render(container, 1.0f, g);

		sanityPanel.render(container, 1.0f, g);
		cheatPanel.render(container, 1.0f, g);

		lastControlledTime = System.nanoTime();
	}

	private static void reloadAll()
	{
		long beforeTime = System.currentTimeMillis();

		if (!gameContainer.getInput().isKeyDown(Input.KEY_LCONTROL))
		{
			Debug.log("Reloading all resources...");

			List<String> entireCommand = new ArrayList<String>();

			entireCommand.add("java");
			entireCommand.add("-jar");
			entireCommand.add("imagePackager.jar");

			if (status != GameStatus.MAP_EDITOR || !MapEditor.getSelectedTiles().isEmpty() || MapEditor.getSelectedObjects().isEmpty())
			{
				entireCommand.add(FilePaths.TILE_TEXTURES);
			}

			if (status != GameStatus.MAP_EDITOR || !MapEditor.getSelectedEntities().isEmpty() || MapEditor.getSelectedObjects().isEmpty())
			{
				entireCommand.add(FilePaths.ENTITIES);
			}

			Set<String> selectedWrappers = new HashSet<String>();

			if (status == GameStatus.MAP_EDITOR)
			{
				for (WrapperTexture wrapper : MapEditor.getSelectedWrappers())
				{
					selectedWrappers.add(wrapper.getRelativePath().substring(0, wrapper.getRelativePath().lastIndexOf('/')));
				}
			}

			if (MapEditor.getSelectedObjects().isEmpty() && selectedWrappers.isEmpty())
			{
				entireCommand.add(FilePaths.WRAPPERS);
				entireCommand.add(FilePaths.PARTICLES);
			}
			else
			{
				entireCommand.add("flat");
				entireCommand.addAll(selectedWrappers);
			}

			Debug.log("Repackaging resources...");
			Debug.log("Executing command: " + Arrays.toString(entireCommand.toArray(new String[] {})));

			ProcessBuilder builder = new ProcessBuilder(entireCommand);

			builder.redirectError(Redirect.INHERIT);
			builder.redirectOutput(Redirect.INHERIT);

			try
			{
				builder.start().waitFor();
			}
			catch (Exception e)
			{
				Debug.warn("Exception while re-packing images: " + e, e);
			}

			Debug.log("Repackaged resources.");

			ResourceLoader.releaseAll();
			WrapperTextureHandler.releaseAll();
			Entity.reloadAll();
			TerrainObject.reloadAll();
		}
		else
		{
			Debug.log("Reloading config files...");
		}

		EntityProperties.reloadAll();
		EmitterType.reloadAllTemplates();

		if (GameLauncher.getStatus() == GameStatus.MAP_EDITOR)
		{
			MapEditor.saveItAll();
			MapEditor.reload();
		}
		else if (GameLauncher.getStatus() == GameStatus.IN_LEVEL)
		{
			LevelManager.reset();
		}

		Debug.log("Finished reloading resources (took " + (System.currentTimeMillis() - beforeTime) + "ms).");
	}

	private static void checkLaunchPermission()
	{
		Collection<String> allowedUsers = Arrays.asList("User", "Florian", "Reedflower", "Michael", "Benjamin");
		String username = System.getProperty("user.name");

		if (!demoMode)
		{
			boolean matchedUser = false;

			for (String user : allowedUsers)
			{
				if (user.equalsIgnoreCase(username))
				{
					matchedUser = true;

					break;
				}
			}

			if (!matchedUser)
			{
				Debug.warn("Insufficient permission to launch game, " + username + " is not authorized.");

				System.exit(0);
			}
		}
	}

	private static void processArgs()
	{
		if (!(new File(FilePaths.LAUNCH_ARGS).exists()))
		{
			Debug.log("Launch args file " + FilePaths.LAUNCH_ARGS + " not found.");

			return;
		}

		try
		{
			@SuppressWarnings("serial")
			ConfigFileHandler cfg = new ConfigFileHandler(FileManager.getFile(FilePaths.LAUNCH_ARGS), new HashMap<String, String>()
			{
				{
					put("fullscreen", "true");
					put("vsync", "true");
					put("devmode", "false");
					put("lockfps", "true");
					put("usespritesheets", "true");
				}
			});

			fullscreen = cfg.getBoolean("fullscreen");
			Debug.log("Set to run in " + (fullscreen ? "FULLSCREEN" : "WINDOWED") + " mode.");

			vSync = cfg.getBoolean("vsync");
			Debug.log("VSync is " + (vSync ? "enabled" : "disabled") + ".");

			developerMode = cfg.getBoolean("devmode");
			Debug.log("Developer Mode is " + (developerMode ? "enabled" : "disabled") + ".");

			lockFPS = cfg.getBoolean("lockfps");
			Debug.log("FPS are " + (developerMode ? ("locked to " + targetFPS) : "unlocked") + ".");

			ResourceLoader.LOAD_MODE = cfg.getBoolean("usespritesheets") ? ResourceLoader.LoadMode.SPRITESHEET : ResourceLoader.LoadMode.INDIVIDUAL_FILES;
			Debug.log("Resource load mode is set to " + ResourceLoader.LOAD_MODE + ".");
		}
		catch (Exception e)
		{
			Debug.warn("Exception while processing launch args: " + e, e);
		}
	}

	private static void debugRuntimeLocation() throws Exception
	{
		Debug.log("Current: " + new File(".").toPath().toAbsolutePath());
		Debug.log("Current (normalized): " + new File(".").toPath().toAbsolutePath().normalize());
		Debug.log("Jar location: " + URLDecoder.decode(GameLauncher.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8"));
	}

	private static void setDisplayMode(int preferredWidth, int preferredHeight, boolean fullscreen) throws Exception
	{
		Debug.log("Trying to find display mode for w:" + preferredWidth + ", h:" + preferredHeight + " and fs:" + fullscreen);

		try
		{
			gameContainer.setDisplayMode(preferredWidth, preferredHeight, fullscreen);
		}
		catch (Exception e)
		{
			Debug.log("Couldn't find proper display mode, trying to find another: " + e, e);

			DisplayMode current = null, desktop = Display.getDesktopDisplayMode();

			for (DisplayMode mode : Display.getAvailableDisplayModes())
			{
				if ((current == null || mode.getWidth() > current.getWidth() && mode.getHeight() > current.getHeight() || mode.getWidth() == current.getWidth() && mode.getHeight() == current.getHeight() && (mode.getBitsPerPixel() == desktop.getBitsPerPixel() && mode.getFrequency() == desktop.getFrequency())) && (mode.isFullscreenCapable() || !fullscreen))
				{
					current = mode;

					Debug.log("Considering " + mode + " ...");
				}
			}

			Debug.log("Chose " + current + " as new display mode.");

			gameContainer.setDisplayMode(current.getWidth(), current.getHeight(), fullscreen);
		}
	}

	public static void goToLastVisitedLevel()
	{
		status = GameStatus.IN_LEVEL;

		String lastLevelID = (String) (SaveHandler.getActiveSave().globalInformation.get(SaveState.LAST_VISITED_LEVEL) != null ? SaveHandler.getActiveSave().globalInformation.get(SaveState.LAST_VISITED_LEVEL)[0] : null);

		if (lastLevelID != null)
		{
			boolean shouldUseDoor = Boolean.parseBoolean((String) SaveHandler.getActiveSave().globalInformation.get(Level.LEVEL_SHOULD_USE_DOOR)[0]);

			if (shouldUseDoor)
			{
				TileDoor.setFindStart(Boolean.parseBoolean((String) SaveHandler.getActiveSave().globalInformation.get(Level.LEVEL_DOOR_SHOULD_FIND_START)[0]));
				TileDoor.setEntryDoorID(Integer.parseInt((String) SaveHandler.getActiveSave().globalInformation.get(Level.LEVEL_DOOR_ENTRY_ID)[0]));
			}

			LevelManager.initMap(Level.getMapPathByID(lastLevelID), 3000, shouldUseDoor);
		}
		else
		// new game
		{
			LevelManager.initMap(Level.getMapPathByID("20-01"), 3000, false);
		}
	}

	@Override
	public boolean closeRequested()
	{
		if (status == GameStatus.MAP_EDITOR)
		{
			MapEditor.saveItAll();
		}

		return super.closeRequested();
	}

	private static void readBuildInfo()
	{
		if (developerMode)
		{
			try
			{
				File revsFolder = new File("../LinkedSVN/db/revs/0");

				if (revsFolder.exists())
				{
					File latestRevision = null;

					for (File file : revsFolder.listFiles())
					{
						if (CheatPanel.isStringNumeric(file.getName()) && (latestRevision == null || Integer.parseInt(file.getName()) > Integer.parseInt(latestRevision.getName())))
						{
							latestRevision = file;
						}
					}

					if (latestRevision != null)
					{
						buildInfo = new BuildInfo();

						buildInfo.name = latestRevision.getName();
						buildInfo.date = new SimpleDateFormat("h:mm a - dd/MM/yy").format(latestRevision.lastModified());

						FileHandle buildInfoFile = FileManager.getOrCreateFile(FilePaths.BUILD_INFO);

						ConfigFileHandler cfg = new ConfigFileHandler(buildInfoFile);

						cfg.set("name", buildInfo.name);
						cfg.set("date", buildInfo.date);

						cfg.write();
					}
				}
			}
			catch (Exception e)
			{
				Debug.warn("Couldn't read / write build info: " + e, e);
			}
		}

		if (buildInfo == null)
		{
			buildInfo = new BuildInfo();

			if (!FileManager.existsFile(FilePaths.BUILD_INFO))
			{
				buildInfo.name = "389+";
				buildInfo.date = "9:54PM - 05/09/2015";
			}
			else
			{
				ConfigFileHandler reader = new ConfigFileHandler(FileManager.getFileQuietly(FilePaths.BUILD_INFO));

				buildInfo.name = reader.getString("name");
				buildInfo.date = reader.getString("date");
			}
		}
	}

	public static void lockFPS(int targetFPS)
	{
		gameContainer.setTargetFrameRate(targetFPS);
		gameContainer.setMinimumLogicUpdateInterval(Math.max(1000 / targetFPS, 1));
		gameContainer.setMaximumLogicUpdateInterval(Math.max(1000 / targetFPS, 1));

		GameLauncher.targetFPS = targetFPS;
	}

	public static void clearRecords()
	{
		gameContainer.getInput().clearKeyPressedRecord();
		gameContainer.getInput().clearControlPressedRecord();
		gameContainer.getInput().clearMousePressedRecord();
	}

	public static void exit()
	{
		gameContainer.exit();
	}

	public static int getFPS()
	{
		return gameContainer.getFPS();
	}

	public static boolean isFullscreenMode()
	{
		return fullscreen;
	}

	public static boolean isDeveloperMode()
	{
		return developerMode;
	}

	public static GameContainer getContainer()
	{
		return gameContainer;
	}

	public static void setFullscreenMode(boolean fullscreenMode)
	{
		GameLauncher.fullscreen = fullscreenMode;
	}

	public static Graphics getGraphics()
	{
		return gameContainer.getGraphics();
	}

	public static int getHeight()
	{
		return TARGET_HEIGHT;
	}

	public static int getWidth()
	{
		return TARGET_WIDTH;
	}

	public static void setStatus(GameStatus status)
	{
		if (status == GameStatus.IN_LEVEL)
		{
			LevelManager.resume();
		}

		GameLauncher.status = status;
	}

	public static GameStatus getStatus()
	{
		return status;
	}

	public static Level getLevelContext()
	{
		return levelContext;
	}

	public static void setLevelContext(Level levelContext)
	{
		GameLauncher.levelContext = levelContext;
	}

	public static TrueTypeFont getFont()
	{
		return Fonts.getDefaultFont();
	}

	public static TrueTypeFont getSmallFont()
	{
		return Fonts.getSmallFont();
	}

	public static int getTargetFPS()
	{
		return targetFPS;
	}

	public static String getVersion()
	{
		return null;
	}

	public static int getDelta()
	{
		return delta;
	}

	public static int getRealDelta()
	{
		return performancePanel.getRealDelta();
	}

	public static long getTotalTime()
	{
		return totalTime;
	}

	public static long getUpdateTime()
	{
		return updateTime;
	}

	public static long getRenderTime()
	{
		return renderTime;
	}

	public static long getIdleTime()
	{
		return idleTime;
	}

	public static long getUnspecifiedTime()
	{
		return unspecifiedTime;
	}

	public static PerformancePanel getPerformancePanel()
	{
		return performancePanel;
	}

	public static CakePanel getCakePanel()
	{
		return cakePanel;
	}

	public static CheatPanel getCheatPanel()
	{
		return cheatPanel;
	}

	public static long getUsedMemory()
	{
		return performancePanel.getUsedMemory();
	}

	public static long getFreeMemory()
	{
		return performancePanel.getFreeMemory();
	}

	public static long getAllocatedMemory()
	{
		return performancePanel.getAllocatedMemory();
	}

	public static Runtime getRuntime()
	{
		return PerformancePanel.getRuntime();
	}

	public static SanityPanel getSanityPanel()
	{
		return sanityPanel;
	}

	public static boolean isDemoMode()
	{
		return demoMode;
	}

	public static BuildInfo getBuildInfo()
	{
		return buildInfo;
	}

	private static class BuildInfo
	{
		private String name;
		private String date;
	}
}