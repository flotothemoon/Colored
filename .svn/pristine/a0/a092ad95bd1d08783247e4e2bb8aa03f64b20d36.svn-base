package com.unlogical.colored.entity.boss;

import java.util.HashSet;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.math.Vector2;
import com.unlogical.colored.entity.Entity;
import com.unlogical.colored.entity.EntityType;
import com.unlogical.colored.entity.projectile.EntityProjectile;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.resources.font.Fonts;
import com.unlogical.colored.util.ColorHelper;
import com.unlogical.colored.util.Dimension;
import com.unlogical.colored.util.LevelObject;
import com.unlogical.colored.util.Renderer;

public class EntityReversalBoss extends EntityBoss
{
	private static final float MAX_TARGET_DISTANCE = 1200.0f;
	private static final int IN_BETWEEN_SHOOTING_COOLDOWN = 250;
	private static final int PROJECTILE_COUNT = 5;
	private static final int SHOOT_COOLDOWN = 5000;

	private boolean shootingProjectiles;

	private Set<EntityProjectile> projectiles = new HashSet<EntityProjectile>();
	private EntityBossSpikeBoots boots;

	private int betweenCooldown;
	private int shotProjectilesCount;
	private int shootCooldown = SHOOT_COOLDOWN;

	public EntityReversalBoss(EntityType type, Vector2 position, Level level, Dimension dimension, boolean allowMirrors)
	{
		super(type, position, level, dimension, allowMirrors);
	}

	@Override
	public void init()
	{
		super.init();

		this.boots = (EntityBossSpikeBoots) Entity.createEntity(EntityType.BOSS_SPIKE_BOOTS, new Vector2(), level, dimension, false);
		this.boots.setPosition(updateBootPosition(this.boots, this.position));
		this.boots.setShared(true);
		this.boots.setPersistent(false);

		level.addEntity(this.boots);
	}

	@Override
	public LevelObject deepCopy(Map<Object, Object> copiedReferences)
	{
		EntityReversalBoss copy = (EntityReversalBoss) super.deepCopy(copiedReferences);

		copy.boots = (EntityBossSpikeBoots) Level.getCopy(this.boots, copiedReferences);

		return copy;
	}

	@Override
	public void onUpdate(float delta, Random rng)
	{
		super.onUpdate(delta, rng);

		if (this.dimension == level.getForegroundDimension())
		{
			if (Math.abs(distanceToPlayer.x) < MAX_TARGET_DISTANCE)
			{
				if (!active)
				{
					active = true;
					((EntityBoss) this.mirroredEntity).active = true;

					shotProjectilesCount = 0;
				}
			}
			else
			{
				active = false;
				((EntityBoss) this.mirroredEntity).active = false;

				shootCooldown = SHOOT_COOLDOWN;
			}

			if (active)
			{
				movingRight = distanceToPlayer.x > 0.0f;

				this.velocity.x += this.properties.getAcceleration(delta) * (this.movingRight ? 1 : -1);

				if (Math.abs(this.velocity.x) > this.properties.getMaxSpeed())
				{
					this.velocity.x = this.properties.getMaxSpeed() * Math.signum(this.velocity.x);
				}

				if (!shootingProjectiles)
				{
					if (shootCooldown <= 0)
					{
						shootingProjectiles = true;

						shotProjectilesCount = 0;
						shootCooldown = SHOOT_COOLDOWN;
						betweenCooldown = IN_BETWEEN_SHOOTING_COOLDOWN;
					}
					else
					{
						shootCooldown -= delta;
					}
				}
				else
				{
					betweenCooldown -= delta;

					if (betweenCooldown <= 0)
					{
						if (++shotProjectilesCount > PROJECTILE_COUNT)
						{
							shootingProjectiles = false;
						}
						else
						{
							EntityProjectile projectile = shootProjectile(EntityType.SHADOWBALL);

							if (this.hitbox.contains(projectile.getHitbox()) || this.hitbox.intersects(projectile.getHitbox()))
							{
								projectiles.add(projectile);
							}
						}

						betweenCooldown = IN_BETWEEN_SHOOTING_COOLDOWN;
					}
				}
			}
			else
			{
				this.velocity.x *= 0.9f;
			}
		}
		else
		{
			this.velocity.x = -this.mirroredEntity.getVelocity().x;
			this.movingRight = !((EntityBoss) this.mirroredEntity).movingRight;
		}

		this.setFocused(this.movingRight);
	}

	@Override
	public void draw(Batch batch)
	{
		super.draw(batch);

		if (alive)
		{
			Renderer.setFont(Fonts.getSmallFont());

			String drawString = "";

			for (int i = 0; i < this.properties.getMaxHealth() - this.health; i++)
			{
				drawString += "X";
			}

			for (int i = 0; i < this.health; i++)
			{
				drawString += "O";
			}

			Renderer.drawString(drawString, customModifiyDrawColor(this.getDrawColor(this.dimension, ColorHelper.buffer)), this.getCenterX() - Renderer.getWidth(drawString) / 2.0f, this.getCenterY() - 58, 1.0f, batch);
		}

		if (this.boots != null)
		{
			this.updateBootPosition(this.boots, this.position);
			this.boots.draw(batch);
		}
	}

	@Override
	protected Color customModifiyDrawColor(Color color)
	{
		return color; // ColorHelper.inverseMultiplyRGBAndCopy(super.customModifiyDrawColor(color),
						// Color.red, 0.8f * (1.0f - ((float) shootCooldown) /
						// ((float) SHOOT_COOLDOWN)));
	}

	private Vector2 updateBootPosition(EntityBossSpikeBoots boots, Vector2 myPosition)
	{
		Vector2 result = boots.getPosition();

		result.x = this.getCenterX() - boots.getHitbox().getWidth() / 2;
		result.y = this.getMaxY() - boots.getHitbox().getHeight();

		boots.setPosition(result.x, result.y);
		
		return result;
	}

	@Override
	protected boolean canBeHarmedBy(Entity entity)
	{
		if (!(entity instanceof EntityProjectile) && !(entity instanceof EntityBossSpikeBoots) || entity == this.boots)
		{
			return false;
		}

		return super.canBeHarmedBy(entity) && ((EntityProjectile) entity).getSource() != this && !projectiles.contains(entity);
	}
}
