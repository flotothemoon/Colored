package com.unlogical.colored.levelmanaging;

import java.io.IOException;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.unlogical.colored.GameLauncher;
import com.unlogical.colored.entity.player.EntityPlayer;
import com.unlogical.colored.filesystem.FilePaths;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.resources.font.Fonts;
import com.unlogical.colored.resources.image.Images;
import com.unlogical.colored.util.ColorHelper;
import com.unlogical.colored.util.Dimension;
import com.unlogical.colored.util.Renderer;
import com.unlogical.colored.util.ShaderHandler;
import com.unlogical.colored.util.Transitions;

public final class GUIManager
{
	private static final int TEXT_DISPLAY_TIME = 3000;
	private static final int TEXT_FADE_IN_TIME = 500;

	private static final String RESUME_KEY_HINT = "resumeKeyHint";
	private static final String RESUME_HINT = "resumeHint";
	private static final String PREVIOUS_KEY_HINT = "previousKeyHint";
	private static final String PREVIOUS_HINT = "previousHint";
	private static final String NEXT_KEY_HINT = "nextKeyHint";
	private static final String NEXT_HINT = "nextHint";

	private static Level level;
	private static int selectionTime;
	private static int textDisplayTime;

	public static void init() throws IOException
	{
		Images.registerAndLoad(RESUME_KEY_HINT, FilePaths.GUI + "/resumeKey.png");
		Images.registerAndLoad(RESUME_HINT, FilePaths.GUI + "/continue.png");
		Images.registerAndLoad(PREVIOUS_KEY_HINT, FilePaths.GUI + "/previousKey.png");
		Images.registerAndLoad(NEXT_KEY_HINT, FilePaths.GUI + "/nextKey.png");
		Images.registerAndLoad(NEXT_HINT, FilePaths.GUI + "/next.png");
		Images.registerAndLoad(PREVIOUS_HINT, FilePaths.GUI + "/previous.png");
	}

	public static void initMap(Level level, boolean showText)
	{
		GUIManager.level = level;

		if (showText)
		{
			textDisplayTime = TEXT_DISPLAY_TIME;
		}
	}

	public static void update(int delta)
	{
		if (LevelManager.isInCheckpointSelectionMode())
		{
			selectionTime += delta;

			if (selectionTime > 5000)
			{
				selectionTime = 5000;
			}
		}
		else if (selectionTime > 0)
		{
			selectionTime -= delta * 8;
		}

		if (textDisplayTime > 0)
		{
			textDisplayTime -= delta;
		}
	}

	public static void render(Batch batch)
	{		
		level.getControllingPlayer().drawOverlay(batch);

		if (level.getControllingPlayer().hasMirror())
		{
			((EntityPlayer) level.getControllingPlayer().getMirroredEntity()).drawOverlay(batch);
		}

		if (selectionTime > 0)
		{
			if (selectionTime >= 500)
			{
				int curTime = (int) (System.currentTimeMillis() % 10000);

				float alpha = (float) (Math.min((selectionTime - 500) / (1000.0f), 1.0f) + Math.sin(curTime / (LevelManager.isInCheckpointSelectionMode() ? (Math.max(0.00001f, LevelManager.getCheckpointingFactor())) : 100.0f) / 400.0f) * 0.5f - 0.2f) * LevelManager.getCheckpointingFactor();
				
				TextureRegion resumeImage = Images.getImage(RESUME_HINT);
				TextureRegion resumeKeyImage = Images.getImage(RESUME_KEY_HINT);
				TextureRegion prevImage = Images.getImage(PREVIOUS_HINT, LevelManager.isPreviousCheckpointAvailable() ? Dimension.LIGHT : Dimension.SHADOW);
				TextureRegion prevKeyImage = Images.getImage(PREVIOUS_KEY_HINT, LevelManager.isPreviousCheckpointAvailable() ? Dimension.LIGHT : Dimension.SHADOW);
				TextureRegion nextImage = Images.getImage(NEXT_HINT, LevelManager.isNextCheckpointAvailable() ? Dimension.LIGHT : Dimension.SHADOW);
				TextureRegion nextKeyImage = Images.getImage(NEXT_KEY_HINT, LevelManager.isNextCheckpointAvailable() ? Dimension.LIGHT : Dimension.SHADOW);

				Renderer.useSpriteBatch();
				
				batch.setColor(ColorHelper.applyAlphaAndCopy(Color.WHITE, alpha));
				batch.draw(resumeImage, 30, GameLauncher.getHeight() - resumeImage.getRegionHeight() - resumeKeyImage.getRegionHeight() - 40);

				batch.setColor(ColorHelper.applyAlphaAndCopy(Color.WHITE, alpha));
				batch.draw(resumeKeyImage, 30, GameLauncher.getHeight() - resumeKeyImage.getRegionHeight() - 30);

				if (selectionTime >= 3000)
				{
					alpha = (float) (Math.min((selectionTime - 3000) / (2000.0f), 1.0f) + Math.sin(curTime / (LevelManager.isInCheckpointSelectionMode() ? (Math.max(0.00001f, LevelManager.getCheckpointingFactor())) : 100.0f) / 400.0f) * 0.5f - 0.2f) * LevelManager.getCheckpointingFactor();

					float prevAlpha = LevelManager.isPreviousCheckpointAvailable() ? alpha : 0.15f * alpha;

					batch.setColor(ColorHelper.applyAlphaAndCopy(Color.WHITE, prevAlpha));
					batch.draw(prevImage, 80 + resumeImage.getRegionWidth(), GameLauncher.getHeight() - 40 - prevImage.getRegionHeight() - prevKeyImage.getRegionHeight());

					batch.draw(prevKeyImage, 80 + resumeImage.getRegionWidth(), GameLauncher.getHeight() - 30 - prevKeyImage.getRegionHeight());

					float nextAlpha = LevelManager.isNextCheckpointAvailable() ? alpha : 0.15f * alpha;

					batch.setColor(ColorHelper.applyAlphaAndCopy(Color.WHITE, nextAlpha));
					batch.draw(nextImage, 90 + prevImage.getRegionWidth() + resumeImage.getRegionWidth(), GameLauncher.getHeight() - 40 - nextImage.getRegionHeight() - nextKeyImage.getRegionHeight());

					batch.draw(nextKeyImage, 90 + prevImage.getRegionWidth() + resumeImage.getRegionWidth(), GameLauncher.getHeight() - 30 - nextKeyImage.getRegionHeight());
				}
			}
		}

		if (textDisplayTime > 0)
		{
			ShaderHandler.disableLighting();
			
			String chapter = level.getChapter();
			String levelName = level.getName();
			String chapterText = "- Chapter " + chapter + " -";
			String levelText = levelName;

			float alpha = (textDisplayTime) / ((float) TEXT_DISPLAY_TIME - TEXT_FADE_IN_TIME);

			if (textDisplayTime > TEXT_DISPLAY_TIME - TEXT_FADE_IN_TIME)
			{
				alpha = ((float) TEXT_DISPLAY_TIME - textDisplayTime) / (TEXT_FADE_IN_TIME);
			}

			alpha = Transitions.getFactor(alpha);

			Renderer.setFont(Fonts.getBigGameFont());
			batch.setColor(ColorHelper.applyAlphaAndCopy(Color.WHITE, alpha));

			Renderer.useSpriteBatch();
			
			Renderer.drawString(chapterText, batch.getColor(), GameLauncher.getWidth() / 2 - Renderer.getWidth(chapterText) / 2, GameLauncher.getHeight() / 2 - 20 - 20, 1.0f, batch);

			Renderer.setFont(Fonts.getVeryBigGameFont());

			Renderer.drawString(levelText, batch.getColor(), GameLauncher.getWidth() / 2 - Renderer.getWidth(levelText) / 2, GameLauncher.getHeight() / 2 + 10, 1.0f, batch);
			
			ShaderHandler.enableLighting();
		}
	}
}
