package com.unlogical.colored.entity.player;

import java.util.Random;

import org.newdawn.slick.GameContainer;
import org.newdawn.slick.geom.Vector2f;

import com.unlogical.colored.entity.EntityType;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.terrain.tile.properties.ITileBlockedFromAbove;
import com.unlogical.colored.util.Dimension;

public class EntityScientist extends EntityPlayer
{
	private boolean tryJump;
	private boolean tryMoveUp;
	private boolean tryMoveDown;
	private boolean inputMoveLeft;
	private boolean inputMoveRight;
	private boolean inputMoveUp;
	private boolean inputMoveDown;

	public EntityScientist(Vector2f position, Level level, Dimension dimension, boolean allowMirrors)
	{
		super(EntityType.SCIENTIST, position, level, dimension, false);
	}

	@Override
	public void onUpdate(GameContainer container, float delta, Random rng)
	{
		float friction = 1.0f;

		boolean forceClimbingStop = false;
		
		tryMoveLeft = inputMoveLeft;
		tryMoveRight = inputMoveRight;

		if (climbing)
		{
			boolean tryMoveUp = false;
			boolean tryMoveDown = false;
			float verticalFriction = 0.0f;

			if (inputMoveUp)
			{
				if (climbedTile.contains(this.hitbox.getCenterX(), this.hitbox.getMinY() + 10) || onLadder && climbedTile.contains(this.hitbox.getCenterX(), this.hitbox.getCenterY()))
				{
					tryMoveUp = true;
					velocity.y -= properties.getAcceleration(delta) * CLIMBING_ACCELERATION_FACTOR;

					if (velocity.y > 0.0f)
					{
						verticalFriction = 0.02f;
					}
				}
				else if (onLadder && (inputMoveLeft || inputMoveRight))
				{
					climbing = false;
					forceClimbingStop = true;
				}
			}

			if (inputMoveDown)
			{
				if (climbedTile.contains(this.hitbox.getCenterX(), this.hitbox.getMaxY() - 10) || onLadder && climbedTile.contains(this.hitbox.getCenterX(), this.hitbox.getCenterY()))
				{
					tryMoveDown = true;
					velocity.y += properties.getAcceleration(delta) * CLIMBING_ACCELERATION_FACTOR;

					if (velocity.y < 0.0f)
					{
						verticalFriction = 0.02f;
					}
				}
				else
				{
					climbing = false;
					forceClimbingStop = true;
				}
			}

			if (!(tryMoveUp || tryMoveDown))
			{
				verticalFriction = 0.0145f;
			}

			velocity.y *= 1.0f - (verticalFriction * delta);
		}

		if (onClimbable && onLadder && !climbing && !forcedClimbingStop && !(tryMoveRight || tryMoveLeft) && ((inputMoveDown && (!collidedBelow || tileBelow instanceof ITileBlockedFromAbove)) || inputMoveUp))
		{
			if (this.hitbox.getCenterX() > climbedTile.getHitbox().getCenterX())
			{
				tryMoveLeft = true;
			}
			else
			{
				tryMoveRight = true;
			}
		}

		if (tryMoveLeft && !(climbing && onLadder))
		{
			setFocused(true);

			if (!bouncing)
			{
				velocity.x -= properties.getAcceleration(delta) * (climbing ? CLIMBING_ACCELERATION_FACTOR : 1.0f);

				if (velocity.x > 0)
				{
					friction = 0.0132f * delta;
				}
			}

			if (!climbing)
			{
				if (velocity.x < -properties.getMaxSpeed())
				{
					velocity.x = -properties.getMaxSpeed();
				}
			}
			else if (velocity.x < -properties.getMaxClimbSpeed())
			{
				velocity.x = -properties.getMaxClimbSpeed();
			}

			if (climbing && !climbedTile.contains(this.hitbox.getMinX() + 10, this.hitbox.getCenterY()))
			{
				climbing = false;
				forceClimbingStop = true;
			}
		}

		if (tryMoveRight && !(climbing && onLadder))
		{
			setFocused(false);

			if (!bouncing)
			{
				velocity.x += properties.getAcceleration(delta) * (climbing ? CLIMBING_ACCELERATION_FACTOR : 1.0f);

				if (velocity.x < 0)
				{
					friction = 0.0135f * delta;
				}
			}

			if (!climbing)
			{
				if (velocity.x > properties.getMaxSpeed())
				{
					velocity.x = getProperties().getMaxSpeed();
				}
			}
			else if (velocity.x > properties.getMaxClimbSpeed())
			{
				velocity.x = properties.getMaxClimbSpeed();
			}

			if (climbing && !climbedTile.contains(this.hitbox.getMaxX() - 10, this.hitbox.getCenterY()))
			{
				climbing = false;
				forceClimbingStop = true;
			}
		}

		if (climbingOnGround && !collidedBelow)
		{
			climbingOnGround = false;
		}

		if (climbing && Math.abs(velocity.y) > properties.getMaxClimbSpeed())
		{
			velocity.y = velocity.y < 0 ? -properties.getMaxClimbSpeed() : properties.getMaxClimbSpeed();
		}

		if (!jumping && tryJump && (!hitbox.isCheckedAbove() || hitbox.getDistanceToBlockAbove() > 8.0f) && !collidedAbove && !climbing && (collidedBelow || lastBelow || (closeBelow && (!(hitbox.isRightBottom() && -hitbox.getRightAngle() > 45) && !(hitbox.isLeftBottom() && hitbox.getLeftAngle() > 45)) || hitbox.isOnCorner())))
		{
			velocity.y = -0.57f;
			jumping = true;
		}

		if (forcedClimbingStop && (tryMoveUp || tryMoveDown || collidedBelow))
		{
			forcedClimbingStop = false;
		}

		boolean canClimb = onClimbable && climbedTile.contains(this.hitbox.getMaxX() - 10, this.hitbox.getCenterY()) && climbedTile.contains(this.hitbox.getMinX() + 10, this.hitbox.getCenterY()) && (onLadder || climbedTile.contains(this.hitbox.getCenterX(), this.hitbox.getMaxY() - 10) && climbedTile.contains(this.hitbox.getCenterX(), this.hitbox.getCenterY())) && !forceClimbingStop && !forcedClimbingStop;

		if ((((inputMoveDown && (!collidedBelow || tileBelow instanceof ITileBlockedFromAbove)) || inputMoveUp) || ((tryMoveDown && !collidedBelow) || (tryMoveUp && !collidedAbove))) && onClimbable && !climbing && canClimb)
		{
			if (!onLadder || Math.abs(this.hitbox.getCenterX() - climbedTile.getHitbox().getCenterX()) < 4.0f && !(inputMoveLeft || inputMoveRight))
			{
				climbing = true;

				resetVelocities();

				if (onLadder)
				{
					this.position.x = climbedTile.getHitbox().getCenterX() - this.hitbox.getWidth() / 2.0f;
				}

				if ((collidedBelow || closeBelow || lastBelow) && !tryMoveDown)
				{
					climbingOnGround = true;
				}
			}
		}
		else if (climbing && (!(inputMoveDown || inputMoveUp) || tryJump || !canClimb))
		{
			if (onLadder)
			{
				if (tryMoveRight)
				{
					velocity.x = 0.1f;
				}
				else if (tryMoveLeft)
				{
					velocity.x = -0.1f;
				}
			}

			if (tryJump)
			{
				forceClimbingStop = true;
			}

			climbing = climbing && ((!tryMoveRight && !tryMoveLeft) || !onLadder) && !tryJump;
		}

		if (forceClimbingStop)
		{
			velocity.y *= 0.6f;
			forcedClimbingStop = true;
		}

		if ((!(tryMoveRight || tryMoveLeft) || friction != 1.0f) && (collidedBelow || closeBelow || climbing) && !(hitbox.getLeftAngle() > 45 || -hitbox.getRightAngle() > 45))
		{
			if (friction == 1.0f)
			{
				friction = 1.0f - (0.0145f * delta);
			}

			velocity.x *= friction;
		}

		if (collidedBelow && (!hitbox.isOnCorner() || (hitbox.isLeftBottom() ^ hitbox.isRightBottom())))
		{
			if (!hitbox.isLeftBottom() && !collidedLeft && !onLeftConnectedTile && hitbox.getDistanceToLeftEnd() < 14f && (!hitbox.isCheckedLeft() || hitbox.getDistanceToBlockLeft() > 14f))
			{
				collidedBelow = false;
				gravityActive = true;
				bouncing = true;

				if (velocity.x > 0.0f)
				{
					velocity.x *= -1.15f;
				}

				velocity.x -= 0.0018f * delta;
			}
			else if (!hitbox.isRightBottom() && !collidedRight && !onRightConnectedTile && hitbox.getDistanceToRightEnd() < 14f && (!hitbox.isCheckedRight() || hitbox.getDistanceToBlockRight() > 14f))
			{
				collidedBelow = false;
				bouncing = true;
				gravityActive = true;

				if (velocity.x < 0.0f)
				{
					velocity.x *= -1.15f;
				}

				velocity.x += 0.0018f * delta;
			}
		}
	}
}
