package com.unlogical.colored.story;

import java.util.Map;
import java.util.Random;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;

import com.unlogical.colored.level.Level;
import com.unlogical.colored.levelrendering.LevelRenderer;
import com.unlogical.colored.terrain.tile.cage.TileCage;
import com.unlogical.colored.util.Dimension;

public class ColoredLevelStoryHandler extends CustomStoryHandler
{
	private static Random rng;
	private boolean cageOpened;
	
	public ColoredLevelStoryHandler(Level level)
	{
		super(level);
	}

	@Override
	public CustomStoryHandler deepCopy(Map<Object, Object> copiedReferences)
	{
		ColoredLevelStoryHandler copy = new ColoredLevelStoryHandler((Level) Level.getCopy(level, copiedReferences));
		
		copy.cageOpened = this.cageOpened;
		
		return copy;
	}
	
	@Override
	public void update(GameContainer container, int delta)
	{
		if (cageOpened)
		{
			if (level.getBackgroundFactor() < 1.0f)
			{
				float backgroundFactor = level.getBackgroundFactor();
				
				backgroundFactor += rng.nextFloat() / 5.0f;
				
				if (backgroundFactor > 1.0f)
				{
					backgroundFactor = 1.0f;
				}
				
				Color backgroundColor = level.getDimensionColor(level.getBackgroundDimension());

				backgroundColor.a = Level.DEFAULT_BACKGROUND_BRIGHTNESS + (Level.DEFAULT_FOREGROUND_BRIGHTNESS - Level.DEFAULT_BACKGROUND_BRIGHTNESS) * backgroundFactor;

				level.setBackgroundFactor(backgroundFactor);
			}
			else if (level.getForegroundDimension() != Dimension.LIGHT)
			{
				LevelRenderer.onDimensionToggle(false);
			}			
		}
	}
	
	@Override
	public void onCageOpened(TileCage cage, int levelOpenedCages, int levelTotalCages, boolean fromSave)
	{
		cageOpened = true;
		
		level.BACKGROUND_BRIGHTNESS = level.FOREGROUND_BRIGHTNESS;
		level.setBackgroundFactor(1.0f);
		level.getDimensionColor(level.getBackgroundDimension()).a = 1.0f;
		
		if (!fromSave)
		{
			level.getStoryHandler().shatter(20.0f);
		}
	}
	
	@Override
	public boolean canPlayerTravelDimensions()
	{
		return !cageOpened;
	}
	
	@Override
	public float getShatteringMultiplier()
	{
		return 2.5f;
	}
}
