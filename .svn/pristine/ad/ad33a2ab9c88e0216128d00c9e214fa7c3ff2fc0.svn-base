package com.unlogical.colored.debug;

import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;

import com.unlogical.colored.filesystem.FilePaths;

public class Debug
{
	private static final ArrayList<String> log = new ArrayList<String>();
	private static PrintStream consoleOut;
	private static PrintStream bufferOut;
	private static File tempOutFile;
	
	static
	{
		try
		{
			tempOutFile = FilePaths.getFile(FilePaths.TEMP + "/_tmpout");
			
			if (!tempOutFile.exists())
			{
				tempOutFile.createNewFile();
			}
			
			bufferOut = new PrintStream(new FileOutputStream(tempOutFile));
			consoleOut = System.out;
			System.setOut(bufferOut);
			
			log("System.out re-routed to temp out file " + tempOutFile + ".");
		}
		catch (Exception e)
		{
			consoleOut = System.out;
			bufferOut = System.out;
			
			warn("Couldn't create temporary output file, using default system.out instead: " + e, e);
		}
	}
	
	public static synchronized String log(String message)
	{
		if (shouldWriteLog())
		{
			String data = "@Log: " + message + " (" + Thread.currentThread().getId() + ")";

			log.add(data);

			System.out.println(data);
		}

		return message;
	}

	public static synchronized void log(String data, Throwable e)
	{
		if (shouldWriteLog())
		{
			log(data);
			logStackTrace(e);
		}
	}

	public static synchronized void logStackTrace(Throwable e)
	{
		if (shouldWriteLog())
		{
			log(e.toString());
			for (int i = 0; i < e.getStackTrace().length; i++)
			{
				log(e.getStackTrace()[i] + "");
			}
		}
	}

	public static String warn(String message)
	{
		if (shouldWriteWarnings())
		{
			String data = "@Warning: " + message + " (" + Thread.currentThread().getId() + ")";

			log.add(data);

			System.err.println(data);
		}

		return message;
	}

	public static void warn(String message, Throwable e)
	{
		if (shouldWriteWarnings())
		{
			warn(message);
			warnStackTrace(e);
		}
	}

	public static synchronized void warnStackTrace(Throwable e)
	{
		if (shouldWriteLog())
		{
			warn(e.toString());
			for (int i = 0; i < e.getStackTrace().length; i++)
			{
				warn(e.getStackTrace()[i] + "");
			}
		}
	}
	
	private static boolean shouldWriteLog()
	{
		return true;
	}
	
	private static boolean shouldWriteWarnings()
	{
		return true;
	}

	public static void printStackTrace(int elements)
	{
		for (int i = 0; i < elements && i + 3 < Thread.currentThread().getStackTrace().length; i++)
		{
			System.out.println(Thread.currentThread().getStackTrace()[i + 3]);
		}
	}

	public static ArrayList<String> getLog()
	{
		return log;
	}
}