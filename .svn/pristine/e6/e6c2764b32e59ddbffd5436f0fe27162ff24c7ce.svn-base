package com.unlogical.colored.resources;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.unlogical.colored.debug.Debug;
import com.unlogical.colored.entity.Entity;
import com.unlogical.colored.entity.EntityAction;
import com.unlogical.colored.entity.EntityType;
import com.unlogical.colored.filesystem.FileHandle;
import com.unlogical.colored.filesystem.FileManager;
import com.unlogical.colored.filesystem.FilePaths;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.util.Dimension;

public class ResourceLoader
{
	public static LoadMode LOAD_MODE = LoadMode.SPRITESHEET;
	private static Map<String, List<String[]>> imageConfigFiles = new HashMap<String, List<String[]>>();
	private static Map<String, Texture> spritesheets = new HashMap<String, Texture>();
	private static ArrayList<Texture> imageBuffer = new ArrayList<Texture>();

	public static void releaseAll()
	{
		spritesheets.clear();
		imageConfigFiles.clear();
	}

	public static void release(String path)
	{
		String dataPath = getSpriteDataPath(path);

		imageConfigFiles.remove(dataPath);
		spritesheets.remove(dataPath);
	}

	private static List<String[]> getConfigLines(String path) throws IOException
	{
		List<String[]> configLines = imageConfigFiles.get(path);

		if (configLines == null)
		{
			if (!FileManager.existsFile(path + ".dat"))
			{
				// Debug.log("Couldn't find spreadsheet data in " + path + ".");

				return null;
			}

			FileHandle configFile = FileManager.getFile(path + ".dat");
			BufferedReader reader = new BufferedReader(new InputStreamReader(configFile.createInputStream()));

			List<String> lines = new ArrayList<String>();
			String fLine;

			while ((fLine = reader.readLine()) != null)
			{
				lines.add(fLine);
			}

			configLines = new ArrayList<String[]>();

			for (String line : lines)
			{
				configLines.add(line.replaceAll(" ", "").split(","));
			}

			imageConfigFiles.put(path, configLines);
		}

		return configLines;
	}

	private static Texture getSpritesheet(String path)
	{
		if (spritesheets.containsKey(path))
		{
			return spritesheets.get(path);
		}

		try
		{
			spritesheets.put(path, new Texture(FileManager.globaliseFile(path + ".png")));
		}
		catch (Exception e)
		{
			throw new RuntimeException("Spritesheet " + path + ".png not found or invalid: " + e, e);
		}

		return spritesheets.get(path);
	}

	private static TextureRegion[] readFromSpritesheet(String dataPath, String[] imageInfo)
	{
		int imageCount = Integer.parseInt(imageInfo[3]);
		int startX = Integer.parseInt(imageInfo[4]);
		int startY = Integer.parseInt(imageInfo[5]);
		int baseWidth = Integer.parseInt(imageInfo[6]);
		int baseHeight = Integer.parseInt(imageInfo[7]);

		Texture spritesheet = getSpritesheet(dataPath);
		TextureRegion[] images = new TextureRegion[imageCount];

		for (int i = 0; i < imageCount; i++)
		{
			images[i] = new TextureRegion(spritesheet, startX + i * baseWidth, startY, baseWidth, baseHeight);
			images[i].flip(false, true);
		}

		return images;
	}

	private static String getSpriteDataPath(String path)
	{
		String dataPath = path;
		dataPath = dataPath.replace('\\', '/');
		dataPath = dataPath.substring(0, dataPath.lastIndexOf('/'));
		dataPath = dataPath + "/_" + (dataPath.contains("/") ? dataPath.substring(dataPath.lastIndexOf('/') + 1) : dataPath);

		return dataPath;
	}

	public static TextureRegion[][] getAnimatedImages(String fullPath) throws IOException
	{
		return getAnimatedImages(fullPath, LOAD_MODE);
	}

	public static TextureRegion[][] getAnimatedImages(String fullPath, LoadMode loadMode) throws IOException
	{
		if (loadMode == LoadMode.SPRITESHEET)
		{
			String dataPath = getSpriteDataPath(fullPath);
			List<String[]> configLines = getConfigLines(dataPath);
			List<TextureRegion[]> images = new ArrayList<TextureRegion[]>();
			String base = fullPath.substring(fullPath.lastIndexOf('/') + 1);

			if (configLines == null)
			{
				return null;
			}

			for (String[] line : configLines)
			{
				if (base.equals(line[0]))
				{
					images.add(readFromSpritesheet(dataPath, line));
				}
			}

			TextureRegion[][] availableImages = new TextureRegion[images.size()][];

			for (int i = 0; i < images.size(); i++)
			{
				availableImages[i] = images.get(i);
			}

			if (availableImages.length == 0)
			{
				Debug.log("Couldn't find any images for " + dataPath);

				return null;
			}

			return availableImages;
		}
		else if (loadMode == LoadMode.INDIVIDUAL_FILES)
		{
			TextureRegion[][] availableImages;
			Texture[] mainImages;
			String path = fullPath.endsWith(".png") ? fullPath.substring(0, fullPath.length() - 4) : fullPath;
			String imgPath = path + "-1.png";

			imageBuffer.clear();

			int counter = 0;

			while (FileManager.existsFile(imgPath))
			{
				try
				{
					imageBuffer.add(new Texture(imgPath));
				}
				catch (OutOfMemoryError e)
				{
					Debug.warn("was trying to load " + imgPath);
					Debug.warn("what the heck just happened we ran out of memooooory: " + e, e);
				}

				counter++;

				imgPath = path + counter + "-1.png";
			}

			if (imageBuffer.isEmpty())
			{
				return null;
			}

			mainImages = new Texture[imageBuffer.size()];

			for (int i = 0; i < imageBuffer.size(); i++)
			{
				mainImages[i] = imageBuffer.get(i);
			}

			availableImages = new TextureRegion[mainImages.length][];

			for (int i = 0; i < availableImages.length; i++)
			{
				availableImages[i] = getAnimationImages(path + (i / 2 > 0 ? i / 2 : ""), (i % 2 == 0) ? "" : "m");
			}

			return availableImages;
		}

		throw new UnsupportedOperationException("Load mode " + loadMode + " doesn't exist.");
	}

	public static HashMap<String, TextureRegion[][]> getTileImages(String tileName, boolean animated)
	{
		HashMap<String, TextureRegion[][]> availableImages = new HashMap<String, TextureRegion[][]>();

		for (String chapter : Level.getChapters())
		{
			TextureRegion[][] images = null;

			try
			{
				images = getTileImages(chapter, tileName, animated);

				if (images == null)
				{
					if (chapter.equals("20"))
					{
						Debug.warn("Unable to find base tile images for " + tileName + ".");
					}

					images = availableImages.get("20");
				}
			}
			catch (IOException e)
			{
				throw new RuntimeException("Exception while loading tile images for " + tileName + ": " + e, e);
			}

			availableImages.put(chapter, images);

		}

		return availableImages;
	}

	private static TextureRegion[][] getTileImages(String chapter, String tileName, boolean animated) throws IOException
	{
		TextureRegion[][] images = null;
		TextureRegion[] mainImages;
		String path = FilePaths.TILE_TEXTURES + (chapter.equals("20") ? "" : ("/" + chapter)) + (animated ? FilePaths.TILE_ANIMATIONS_POSTFIX : "") + "/" + tileName;

		imageBuffer.clear();

		if (LOAD_MODE == LoadMode.SPRITESHEET)
		{
			String dataPath = getSpriteDataPath(path + (animated ? "/" : ""));
			List<String[]> configLines = getConfigLines(dataPath);
			List<TextureRegion[]> tempImages = new ArrayList<TextureRegion[]>();
			String base = tileName.toLowerCase();

			if (configLines == null)
			{
				return null;
			}

			for (String[] line : configLines)
			{
				if (base.equals(line[0]))
				{
					tempImages.add(readFromSpritesheet(dataPath, line));
				}
			}

			if (tempImages.isEmpty())
			{
				return null;
			}

			images = new TextureRegion[tempImages.size()][];

			for (int i = 0; i < images.length; i++)
			{
				images[i] = tempImages.get(i);

				if (images[i] == null)
				{
					images[i] = new TextureRegion[1];
				}
			}
		}
		else if (LOAD_MODE == LoadMode.INDIVIDUAL_FILES)
		{
			String imgPath = animated ? (path + "/" + tileName + "-1.png") : (path + ".png");

			if (!FileManager.existsFile(imgPath))
			{
				return null;
			}

			int counter = 0;

			while (FileManager.existsFile(imgPath))
			{
				try
				{
					imageBuffer.add(new Texture(imgPath));
				}
				catch (Exception e)
				{
					throw new RuntimeException("A required resource for tile " + tileName + " was not found, " + imgPath + ": " + e, e);
				}

				counter++;

				imgPath = animated ? (path + "/" + tileName + counter + "-1.png") : (path + counter + ".png");
			}

			mainImages = new TextureRegion[imageBuffer.size()];

			for (int i = 0; i < imageBuffer.size(); i++)
			{
				mainImages[i] = new TextureRegion(imageBuffer.get(i), 0, 0, imageBuffer.get(i).getWidth(), imageBuffer.get(i).getHeight());
				mainImages[i].flip(false, true);
			}

			images = new TextureRegion[mainImages.length][];

			for (int i = 0; i < images.length; i++)
			{
				if (animated)
				{
					images[i] = getAnimationImages(path + "/" + tileName + (i / 2 > 0 ? i / 2 : ""), i % 2 == 0 ? "" : "m");
				}
				else
				{
					images[i] = new TextureRegion[1];
					images[i][0] = mainImages[i];
				}
			}
		}

		return images;
	}

	private static TextureRegion[] getAnimationImages(String path, String dimensionPrefix)
	{
		TextureRegion[] animationImages;
		int counter = 1;
		String imgPath = path + "-1" + dimensionPrefix + ".png";

		imageBuffer.clear();

		while (FileManager.existsFile(imgPath))
		{
			try
			{
				imageBuffer.add(new Texture(imgPath));
			}
			catch (Exception e)
			{
			}

			counter++;
			imgPath = path + "-" + counter + dimensionPrefix + ".png";
		}

		animationImages = new TextureRegion[imageBuffer.size()];
		for (int i = 0; i < imageBuffer.size(); i++)
		{
			animationImages[i] = new TextureRegion(imageBuffer.get(i), 0, 0, imageBuffer.get(i).getWidth(), imageBuffer.get(i).getHeight());
			animationImages[i].flip(false, true);
		}

		return animationImages;
	}

	public static HashMap<String, HashMap<EntityAction, TextureRegion[][]>> getEntityImages(EntityType type)
	{
		HashMap<String, HashMap<EntityAction, TextureRegion[][]>> availableImages = new HashMap<String, HashMap<EntityAction, TextureRegion[][]>>();

		Entity entity = Entity.createEntity(type, null, null, Dimension.LIGHT, false);

		if (entity == null)
		{
			Debug.warn("Tried to load entity images for " + type + ", but an entity for it could not be instantiated (createEntity returned null).");

			return null;
		}

		for (String chapter : Level.getChapters())
		{
			HashMap<EntityAction, TextureRegion[][]> chapterImages = new HashMap<EntityAction, TextureRegion[][]>();
			availableImages.put(chapter, chapterImages);

			for (EntityAction action : EntityAction.values())
			{
				if (entity.supportsAction(action))
				{
					TextureRegion[][] images = null;

					try
					{
						images = getEntityImages(chapter, action, type, entity);
					}
					catch (IOException e)
					{
						throw new RuntimeException("Exception while loading entity images for " + entity + " " + action + ": " + e, e);
					}

					if (images == null)
					{
						if (chapter.equals("20"))
						{
							Debug.warn("Base textures (chapter 20) for entity " + type + " missing for action " + action + ".");
						}

						images = availableImages.get("20").get(action);
					}

					chapterImages.put(action, images);
				}
			}
		}

		return availableImages;
	}

	public static TextureRegion[][] getEntityImages(String chapter, EntityAction action, EntityType type, Entity entity) throws IOException
	{
		TextureRegion[][] images = new TextureRegion[1][];
		TextureRegion[] coloredImages = null;

		ArrayList<Texture> tempImages = new ArrayList<Texture>();

		String directory = entity.getTextureDirectory() + "/" + type.toLowerCaseNameTag() + "/" + (!chapter.equals("20") ? (chapter + "/") : "");

		if (LOAD_MODE == LoadMode.SPRITESHEET)
		{
			String dataPath = getSpriteDataPath(directory);
			List<String[]> configLines = getConfigLines(dataPath);

			if (configLines == null)
			{
				return null;
			}

			String base = type.toLowerCaseNameTag();

			for (String[] line : configLines)
			{
				if (base.equals(line[0]) && action.getIdentifier().equals(line[1]))
				{
					TextureRegion[] innertypeImages = readFromSpritesheet(dataPath, line);
					int index = line[2].equals("m") ? 1 : 0;

					images[index] = new TextureRegion[innertypeImages.length];

					for (int i = 0; i < innertypeImages.length; i++)
					{
						images[index][i] = innertypeImages[i];
					}
				}
			}
		}
		else if (LOAD_MODE == LoadMode.INDIVIDUAL_FILES)
		{
			if (!FileManager.existsFile(directory + type.toLowerCaseNameTag() + "-" + action.getIdentifier() + "-1.png"))
			{
				return null;
			}

			directory = directory + type.toLowerCaseNameTag();

			int count = 1;

			try
			{
				while (FileManager.existsFile(directory + "-" + action.getIdentifier() + "-" + count + ".png"))
				{
					tempImages.add(new Texture(directory + "-" + action.getIdentifier() + "-" + count + ".png"));

					count++;
				}

				coloredImages = new TextureRegion[tempImages.size()];

				for (int i = 0; i < tempImages.size(); i++)
				{
					coloredImages[i] = new TextureRegion(tempImages.get(i), 0, 0, tempImages.get(i).getWidth(), tempImages.get(i).getHeight());
					coloredImages[i].flip(false, true);
				}

				images[0] = coloredImages;
			}
			catch (Exception e)
			{
				Debug.warn("Error while loading textures for " + type + " at " + count + " " + action + " (" + e + ").", e);
			}
		}

		return images;
	}

	public static TextureRegion[] getWrapperAnimationImages(String path)
	{
		imageBuffer.clear();
		TextureRegion[] images;
		int counter = 0;
		String imgPath = path + "";

		while (FileManager.existsFile(imgPath))
		{
			try
			{
				imageBuffer.add(new Texture(path));
			}
			catch (Exception e)
			{
				Debug.warn("Exception while loading image \"" + path + "\": " + e, e);
			}

			counter++;
			imgPath = path + counter + ".png";
		}

		images = (TextureRegion[]) imageBuffer.toArray();

		return images;
	}

	public static TextureRegion[] getImages(String fullPath, boolean useDimensions)
	{
		TextureRegion[] images = new TextureRegion[1];

		String path = fullPath.endsWith(".png") ? fullPath.substring(0, fullPath.length() - 4) : fullPath;
		String imgPath = path + ".png";

		if (FileManager.existsFile(imgPath))
		{
			try
			{
				Texture texture = new Texture(FileManager.globaliseFile(imgPath));
				images[0] = new TextureRegion(texture, 0, 0, texture.getWidth(), texture.getHeight());
				images[0].flip(false, true);
			}
			catch (Exception e)
			{
				Debug.warn("BaconException: Could not load images: " + e, e);
			}
		}
		else
		{
			Debug.warn("Tried to load image(s) from path " + fullPath + ", the resolved path " + imgPath + " however does not exist.");
		}

		return images;
	}

	public enum LoadMode
	{
		INDIVIDUAL_FILES, SPRITESHEET
	}
}
