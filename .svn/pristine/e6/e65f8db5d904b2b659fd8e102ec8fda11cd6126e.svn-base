package com.unlogical.colored.util;

import org.newdawn.slick.Graphics;
import org.newdawn.slick.geom.Vector2f;

public strictfp class GameObject
{
	public static final String ENABLE_RENDERING_EVENT = "enableRendering";
	
	protected RealImage image;
	protected Vector2f position;

	protected boolean hidden;
	protected boolean enabled = true;
	protected boolean removed;

	protected boolean shared;
	protected boolean reSimulating;
	protected boolean dimensionUnique;

	protected Dimension dimension;

	public GameObject(RealImage image, Vector2f position)
	{
		this.image = image;
		this.position = position;
	}

	@Override
	public String toString()
	{
		return "[" + this.getClass().getSimpleName() + ": dimension:" + this.dimension.toString().toLowerCase() + (this.removed ? " removed" : "")+ (this.shared ? " shared" : "") + customToString() + " x:" + this.position.x + " y:" + this.position.y + "]";
	}

	public String customToString()
	{
		return "";
	}

	public void setPosition(float x, float y)
	{
		this.position.set(x, y);

		updateHitbox();
	}

	public void setX(float x)
	{
		this.position.set(x, this.position.y);
				
		updateHitbox();
	}

	public void setY(float y)
	{
		this.position.set(this.position.x, y);

		updateHitbox();
	}

	public void adjustX(float x)
	{
		this.position.set(this.position.x + x, this.position.y);

		updateHitbox();
	}

	public void adjustY(float y)
	{
		this.position.set(this.position.x, this.position.y + y);

		updateHitbox();
	}

	public void updateHitbox()
	{

	}

	public void draw(Graphics g)
	{
		if (!hidden && position != null)
		{
			g.drawImage(image, position.x, position.y);
		}
	}

	public void setPosition(Vector2f position)
	{
		this.position = position;

		updateHitbox();
	}

	public boolean inSameDimension(GameObject other)
	{
		return other.getDimension() == this.dimension || !other.dimensionUnique || other.shared || this.shared;
	}

	public Dimension getDimension()
	{
		return dimension;
	}

	public void setDimension(Dimension dimension)
	{
		this.dimension = dimension;
		this.onDimensionChanged(dimension);
	}

	protected void onDimensionChanged(Dimension newDimension)
	{

	}

	public boolean isShared()
	{
		return shared;
	}

	public void setShared(boolean shared)
	{
		if (this.shared == shared ? false : ((this.shared = shared) || true))
		{
			onSharingChanged();
		}
	}

	public void onSharingChanged()
	{
		throw new UnsupportedOperationException("Can you read..? You are supposed to implement this when you want something to be shareable! That's what it's called, damnit!");
	}

	public boolean isHidden()
	{
		return hidden;
	}

	public void setHidden(boolean hidden)
	{
		this.hidden = hidden;
	}

	public void hide()
	{
		this.hidden = true;
	}

	public void show()
	{
		this.hidden = false;
	}

	public boolean isRemoved()
	{
		return removed;
	}

	public void remove()
	{
		this.removed = true;
	}

	public void reAdd()
	{
		this.removed = false;
	}
	
	public void enable()
	{
		this.enabled = true;
	}
	
	public void disable()
	{
		this.enabled = false;
	}

	public RealImage getImage()
	{
		return image;
	}
	
	public void setImage(RealImage image)
	{
		this.image = image;
	}

	public Vector2f getPosition()
	{
		return position;
	}

	public float getX()
	{
		return this.position.x;
	}

	public float getY()
	{
		return this.position.y;
	}

	public boolean shouldHandleAsShared()
	{
		return shared;
	}
	
	public boolean isReSimulating()
	{
		return reSimulating;
	}

	public void setReSimulating(boolean reSimulating)
	{
		this.reSimulating = reSimulating;
	}
	
	public void setEnabled(boolean enabled)
	{
		this.enabled = enabled;
	}

	public boolean isEnabled()
	{
		return this.enabled;
	}
}
