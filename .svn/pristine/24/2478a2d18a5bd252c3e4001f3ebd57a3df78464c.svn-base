package com.unlogical.colored.terrain.tile.cage;

import java.util.Random;

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.geom.Vector2f;

import com.unlogical.colored.level.Level;
import com.unlogical.colored.particle.EmitterType;
import com.unlogical.colored.particle.ParticleEmitter;
import com.unlogical.colored.story.EndingStoryHandler;
import com.unlogical.colored.terrain.TileType;
import com.unlogical.colored.terrain.property.TileProperty;
import com.unlogical.colored.terrain.tile.Tile;
import com.unlogical.colored.util.Dimension;
import com.unlogical.colored.util.ILightSource;
import com.unlogical.colored.util.IZDistortion;
import com.unlogical.colored.util.Renderer;
import com.unlogical.colored.util.ShaderHandler;
import com.unlogical.colored.util.ZDistortion;

public abstract class TileCage extends Tile implements IZDistortion, ILightSource
{
	private static final Color lightColor = new Color(0.9882353f, 0.8608475f, 0.0038754323f);

	private static final float OPENED_CAGE_AMBIENT_LIGHT_INTENSITY = 0.05f;
	private static final float LINEAR_ATTENUATION = 0.012f;
	private static final float QUADRATIC_ATTENUATION = 0.000011f;

	private ZDistortion distortion;

	private int cageID;

	private boolean brightnessChanging;
	private boolean opened;
	private boolean completelyCleared;

	private float intensityOffset;
	private float intensityFactor = 0.5f;
	private float linearAttenuation = LINEAR_ATTENUATION;
	private float quadraticAttenuation = QUADRATIC_ATTENUATION;
	private float brightnessChangeFactor;

	private ParticleEmitter transitionEmitter;
	private ParticleEmitter closedEmitter;

	protected TileCage(TileType type, String metadata, int innerType, float rotation, Vector2f position, Level level, Dimension dimension, TileProperty properties, boolean allowMirrors)
	{
		super(type, metadata, innerType, rotation, position, level, dimension, properties, allowMirrors);

		this.distortion = new ZDistortion()
		{
			@Override
			public float getZDistortion(float x, float y)
			{
				return 0.0f;
			}
		};

		if (this.dimension == Dimension.LIGHT && !this.shared)
		{
			this.setShared(true);
		}
	}

	@Override
	public boolean shouldCopy()
	{
		return false;
	}

	@Override
	public boolean shouldReSimulate()
	{
		return false;
	}

	@Override
	public void init()
	{
		super.init();

		if (level.shouldInverseCages())
		{
			this.innerType = 2;
		}

		this.opened = this.innerType == 2;

		if (level.isPlayMode())
		{
			if (level.readFromLevelSave(this.type + "" + cageID) != null && !(level.getStoryHandler().getCustomStoryHandler() instanceof EndingStoryHandler))
			{
				this.opened = Boolean.parseBoolean((String) level.readFromLevelSave(this.type + "" + cageID)[0]);
				this.setInnerType(this.opened ? 2 : 0);

				if (isCleared())
				{
					level.onCageCleared(this, true);
				}
			}
		}

		if (!this.opened)
		{
			this.closedEmitter = this.resumeOrAddEmitter(EmitterType.LIGHT_CAGE, dimension);
		}
	}

	@Override
	public void onUpdate(float delta, Random rng)
	{
		if (brightnessChanging)
		{
			intensityFactor = OPENED_CAGE_AMBIENT_LIGHT_INTENSITY * brightnessChangeFactor + (1.0f - level.getBrightnessTransitionFactor()) * 0.5f;
			linearAttenuation = (1.0f - level.getBrightnessTransitionFactor()) * LINEAR_ATTENUATION;
			quadraticAttenuation = (1.0f - level.getBrightnessTransitionFactor()) * QUADRATIC_ATTENUATION;
		}
		else if (!completelyCleared)
		{
			intensityOffset = (float) Math.sin(Math.toRadians(age / 5.0f)) / 4.0f;
		}
	}

	public void clear()
	{
		if (!isCleared())
		{
			if (!level.shouldInverseCages())
			{
				transitionEmitter = this.addEmitter(EmitterType.LIGHT_CAGE_OPENED, this.dimension);
			}

			brightnessChanging = true;
			completelyCleared = false;
			opened = !level.shouldInverseCages();

			if (closedEmitter != null)
			{
				this.stopAndRemoveEmitter(closedEmitter);
			}

			if (level.shouldInverseCages())
			{
				this.transitionAnimation(1, 0, true, true);
			}
			else
			{
				this.transitionAnimation(1, 2, false, true);
			}

			level.writeToLevelSave(this.type + "" + cageID, opened);

			if (!level.isBonusLevel())
			{
				Object[] levelData = level.readFromLevelSave(Level.LEVEL_CLEARED_CAGE_COUNT);
				Object[] worldData = level.readFromWorldSave(Level.WORLD_CLEARED_CAGE_COUNT);
				int openedLevelCount = levelData != null ? Integer.parseInt((String) levelData[0]) : 0;
				int openedWorldCount = worldData != null ? Integer.parseInt((String) worldData[0]) : 0;

				level.writeToLevelSave(Level.LEVEL_CLEARED_CAGE_COUNT, openedLevelCount + 1);
				level.writeToWorldSave(Level.WORLD_CLEARED_CAGE_COUNT, openedWorldCount + 1);
				level.saveToActiveSave();
			}

			brightnessChangeFactor = level.onCageCleared(this, false);

			// MenuDisplay.displaySavedMessage();
		}
	}

	@Override
	protected void onTransitionFinished(int transitionInnerType, int finalInnerType)
	{
		if (finalInnerType == 0 || finalInnerType == 2)
		{
			completelyCleared = true;
		}
	}

	public void onBrightnessChangeFinished()
	{
		intensityFactor = OPENED_CAGE_AMBIENT_LIGHT_INTENSITY * brightnessChangeFactor;
		linearAttenuation = 0.0f;
		quadraticAttenuation = 0.0f;

		if (transitionEmitter != null)
		{
			this.stopAndRemoveEmitter(transitionEmitter);
		}

		brightnessChanging = false;
	}

	@Override
	public void onCreated()
	{
		int maxID = 0;

		for (Tile door : level.getTiles())
		{
			if (door.getDimension() == Dimension.LIGHT && door instanceof TileCage)
			{
				if (((TileCage) door).getCageID() > maxID)
				{
					maxID = ((TileCage) door).getCageID();
				}
			}
		}

		this.cageID = maxID + 1;
	}

	@Override
	protected void customDraw(Graphics g)
	{
		super.customDraw(g);

		ShaderHandler.disableLighting();

		// g.resetFont();
		// g.setColor(Color.white);
		// g.drawString(this.cageID + "", this.position.x, this.position.y);

		Renderer.clearBind();
	}

	@Override
	public void readMetadata()
	{
		try
		{
			this.cageID = Integer.parseInt(this.metadata);
		}
		catch (Exception e)
		{
			this.cageID = 0;
		}
	}

	@Override
	public void writeMetadata()
	{
		this.metadata = this.cageID + "";
	}

	@Override
	public boolean isSpotLight()
	{
		return true;
	}

	@Override
	public Color getColor()
	{
		return lightColor;
	}

	@Override
	public float getPositionX()
	{
		return this.getCenterX();
	}

	@Override
	public float getPositionY()
	{
		return this.getCenterY();
	}

	@Override
	public float getIntensity()
	{
		return intensityFactor * (1.1f + intensityOffset);
	}

	@Override
	public float getLinearAttenuation()
	{
		return linearAttenuation;
	}

	@Override
	public float getQuadraticAttenuation()
	{
		return quadraticAttenuation;
	}

	@Override
	public int getSpotExponent()
	{
		return 0;
	}

	@Override
	public int getSpotDirection()
	{
		return 0;
	}

	@Override
	public int getAngle()
	{
		return 360;
	}

	@Override
	public int getMinDepth()
	{
		return -Level.MAX_DEPTH;
	}

	@Override
	public int getMaxDepth()
	{
		return Level.MAX_DEPTH;
	}

	@Override
	public ZDistortion getZDistortion()
	{
		return distortion;
	}

	@Override
	public boolean shouldUpdate()
	{
		return true;
	}

	public boolean isReallyChangeable()
	{
		return true;
	}

	public int getCageID()
	{
		return cageID;
	}

	public void setCageID(int cageID)
	{
		this.cageID = cageID;
	}

	public boolean isCleared()
	{
		return this.opened ^ this.level.shouldInverseCages();
	}

	public boolean renderStatic()
	{
		return true;
	}
}
