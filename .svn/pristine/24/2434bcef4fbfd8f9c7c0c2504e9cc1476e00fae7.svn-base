package com.unlogical.colored.gui.colorpicker;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Rectangle;

import com.unlogical.colored.debug.Debug;
import com.unlogical.colored.gui.button.Button;
import com.unlogical.colored.gui.panel.GUIPanel;
import com.unlogical.colored.mapeditor.MapEditor;
import com.unlogical.colored.util.ColorHelper;

public class ColorPicker extends GUIPanel
{
	private Image saturationTexture;
	private Image hueTexture;
	private Image hueSlider;
	private Image svSelector;

	private Color previousColor;

	private Color selectorColor = new Color(1.0f, 1.0f, 1.0f, 1.0f);

	private Color hueColor;
	private Color selectedColor;

	private Rectangle previousColorBox;
	private Rectangle selectedColorBox;

	private Rectangle hueBox;
	private Rectangle saturationBox;

	private int saturationXOffset = 25;
	private int saturationYOffset = 25;

	private int selectorX;
	private int selectorY;
	private int sliderY;

	private float[] hsvValues = { 0f, 1f, 1f };
	private float hueValue = 1f;

	private ColorPickerListener listener;

	private Button cancelButton;
	private Button closeButton;

	public ColorPicker(String title, float xOffset, float yOffset, float width, float height)
	{
		super(title, xOffset, yOffset, width, height);

		this.fillColor = new Color(MapEditor.panelColor);

		try
		{
			saturationTexture = new Image("res/gui/svPane.png");
			hueTexture = new Image("res/gui/huePane.png");
			hueSlider = new Image("res/gui/hueSlider.png");
			svSelector = new Image("res/gui/svSelector.png");
		}
		catch (SlickException e)
		{
		}

		saturationXOffset += xOffset;
		saturationYOffset += yOffset;

		int halfWidth = (saturationTexture.getWidth() + hueTexture.getWidth() + 5) / 2;

		selectedColorBox = new Rectangle(saturationXOffset + halfWidth, saturationYOffset + saturationTexture.getHeight() + 5, halfWidth, 40);
		previousColorBox = new Rectangle(saturationXOffset, saturationYOffset + saturationTexture.getHeight() + 5, halfWidth, 40);

		hueBox = new Rectangle(saturationXOffset + saturationTexture.getWidth() + 5, saturationYOffset, hueTexture.getWidth(), hueTexture.getHeight());
		saturationBox = new Rectangle(saturationXOffset, saturationYOffset, saturationTexture.getWidth(), saturationTexture.getHeight());

		cancelButton = new Button("Cancel", (int) (previousColorBox.getMinX()), (int) (previousColorBox.getMaxY() + 5), (int) previousColorBox.getWidth(), 40)
		{
			@Override
			public void onClick()
			{
				listener.colorChanged(previousColor);
				disable();
			}
		};

		closeButton = new Button("Close", (int) (selectedColorBox.getMinX()), (int) (previousColorBox.getMaxY() + 5), (int) previousColorBox.getWidth(), 40)
		{
			@Override
			public void onClick()
			{
				Debug.log("New color is " + selectorColor.r + ", " + selectedColor.g + ", " + selectedColor.b + ".");
				disable();
			}
		};

		this.setWidth(halfWidth * 2 + 50);
		this.setHeight(closeButton.getY() + closeButton.getHeight() - hueBox.getMinY() + 60);
	}

	public void init(Color color)
	{
		previousColor = new Color(color);

		hueColor = new Color(previousColor);

		selectedColor = new Color(previousColor);

		float[] prevHSV = toHSVColor(previousColor);

		float hue = prevHSV[0] / 360.0f;

		sliderY = (int) ((1.0f - hue) * (hueTexture.getHeight()));

		sliderY = sliderY == 0 ? 1 : sliderY;

		hue = 1.0f - (sliderY / (float) hueTexture.getHeight());

		hsvValues[0] = hueValue = hue * 360.0f;
		hsvValues[1] = hsvValues[2] = 1.0f;

		toRGBColor(hsvValues, hueColor);

		float saturation = (selectorX / (float) saturationTexture.getWidth());
		float val = 1.0f - (selectorY / (float) saturationTexture.getHeight());

		hsvValues[0] = hueValue;
		hsvValues[1] = saturation;
		hsvValues[2] = val;

		toRGBColor(hsvValues, selectedColor);

		selectorX = (int) (prevHSV[1] * saturationTexture.getWidth());
		selectorY = (int) ((1.0f - prevHSV[2]) * saturationTexture.getHeight());
	}

	public void addColorPickerListener(ColorPickerListener listener)
	{
		this.listener = listener;
	}

	@Override
	protected void customUpdate(GameContainer container, int delta)
	{
		int mouseX = container.getInput().getMouseX();
		int mouseY = container.getInput().getMouseY();

		if (hueBox.contains(mouseX, mouseY))
		{
			if (container.getInput().isMouseButtonDown(Input.MOUSE_LEFT_BUTTON))
			{
				sliderY = (int) (mouseY - hueBox.getMinY());

				float hue = 1 - (sliderY / (float) hueTexture.getHeight());

				hsvValues[0] = hueValue = hue * 360.0f;
				hsvValues[1] = hsvValues[2] = 1.0f;

				toRGBColor(hsvValues, hueColor);

				float saturation = (selectorX / (float) saturationTexture.getWidth());
				float val = 1.0f - (selectorY / (float) saturationTexture.getHeight());

				hsvValues[0] = hueValue;
				hsvValues[1] = saturation;
				hsvValues[2] = val;

				toRGBColor(hsvValues, selectedColor);

				listener.colorChanged(selectedColor);
			}
		}
		else if (saturationBox.contains(mouseX, mouseY))
		{
			if (container.getInput().isMouseButtonDown(Input.MOUSE_LEFT_BUTTON))
			{
				selectorX = (int) (mouseX - saturationBox.getMinX());
				selectorY = (int) (mouseY - saturationBox.getMinY());

				float saturation = (selectorX / (float) saturationTexture.getWidth());
				float val = 1.0f - (selectorY / (float) saturationTexture.getHeight());

				hsvValues[0] = hueValue;
				hsvValues[1] = saturation;
				hsvValues[2] = val;

				toRGBColor(hsvValues, selectedColor);

				listener.colorChanged(selectedColor);
			}
		}

		selectorColor.r = 1.0f - selectedColor.r;
		selectorColor.g = 1.0f - selectedColor.g;
		selectorColor.b = 1.0f - selectedColor.b;

		cancelButton.update(container, delta);
		closeButton.update(container, delta);
	}

	@Override
	protected void customRender(GameContainer container, float alphaFactor, Graphics g)
	{
		g.setColor(hueColor);
		g.fillRect(saturationXOffset, saturationYOffset, saturationTexture.getWidth(), saturationTexture.getHeight());

		saturationTexture.setAlpha(alphaFactor);
		hueTexture.setAlpha(alphaFactor);

		g.drawImage(saturationTexture, saturationXOffset, saturationYOffset);
		g.drawImage(hueTexture, saturationXOffset + 5 + saturationTexture.getWidth(), saturationYOffset);

		g.setColor(selectedColor);
		g.fill(selectedColorBox);

		g.setColor(previousColor);
		g.fill(previousColorBox);

		ColorHelper.applyAlphaAndCopy(Color.black, alphaFactor, g);
		g.draw(selectedColorBox);
		g.draw(previousColorBox);
		g.draw(hueBox);
		g.draw(saturationBox);

		g.drawImage(svSelector, saturationBox.getMinX() + selectorX - svSelector.getWidth() / 2, saturationBox.getMinY() + selectorY - svSelector.getHeight() / 2, selectorColor);
		g.drawImage(hueSlider, hueBox.getCenterX() - hueSlider.getWidth() / 2, hueBox.getMinY() + sliderY - hueSlider.getHeight() / 2);

		cancelButton.render(container, alphaFactor, g);
		closeButton.render(container, alphaFactor, g);
	}

	@Override
	public void onPositionUpdate(int xChange, int yChange)
	{
		saturationXOffset += xChange;
		saturationYOffset += yChange;

		selectedColorBox.setX(selectedColorBox.getX() + xChange);
		selectedColorBox.setY(selectedColorBox.getY() + yChange);

		previousColorBox.setX(previousColorBox.getX() + xChange);
		previousColorBox.setY(previousColorBox.getY() + yChange);

		hueBox.setX(hueBox.getX() + xChange);
		hueBox.setY(hueBox.getY() + yChange);

		saturationBox.setX(saturationBox.getX() + xChange);
		saturationBox.setY(saturationBox.getY() + yChange);

		cancelButton.adjust(xChange, yChange);
		closeButton.adjust(xChange, yChange);
	}

	public void toRGBColor(float[] hsv, Color color)
	{
		float h = hsv[0];
		float s = hsv[1];
		float v = hsv[2];

		int sector;

		float r, g, b, f, p, q, t;

		if (s == 0)
		{
			r = g = b = v;
		}
		else
		{
			h /= 60;
			sector = (int) h;
			f = h - sector;
			p = v * (1.0f - s);
			q = v * (1.0f - s * f);
			t = v * (1.0f - s * (1.0f - f));

			switch (sector)
			{
				case 0:
					r = v;
					g = t;
					b = p;
					break;
				case 1:
					r = q;
					g = v;
					b = p;
					break;
				case 2:
					r = p;
					g = v;
					b = t;
					break;
				case 3:
					r = p;
					g = q;
					b = v;
					break;
				case 4:
					r = t;
					g = p;
					b = v;
					break;
				default:
					r = v;
					g = p;
					b = q;
			}
		}

		color.r = r;
		color.g = g;
		color.b = b;
	}

	public float[] toHSVColor(Color color)
	{
		float[] hsv = new float[3];
		float h = 0.0f;
		float s = 0.0f;
		float v = 0.0f;
		float min = 0.0f;
		float max = 0.0f;
		float delta = 0.0f;

		min = Math.min(color.r, color.g);
		min = Math.min(min, color.b);

		max = Math.max(color.r, color.g);
		max = Math.max(max, color.b);

		v = max;
		delta = max - min;

		if (max > 0.0f)
		{
			s = delta / max;
		}
		else
		{
			s = 0.0f;
			h = 0.0f;

			hsv[0] = h;
			hsv[1] = s;
			hsv[2] = v;

			return hsv;
		}

		if (color.r >= max)
		{
			h = (color.g - color.b) / delta;
		}
		else if (color.g >= max)
		{
			h = 2.0f + (color.b - color.r) / delta;
		}
		else
		{
			h = 4.0f + (color.r - color.g) / delta;
		}

		h *= 60.0f;

		if (h < 0.0f)
		{
			h += 360.0f;
		}

		hsv[0] = h;
		hsv[1] = s;
		hsv[2] = v;

		return hsv;
	}
}
