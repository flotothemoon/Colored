package com.unlogical.colored.util;

import org.newdawn.slick.Color;

public class ColorTransformer
{
	public static final Color colorBuffer1 = new Color(1.0f, 1.0f, 1.0f);
	public static final Color colorBuffer2 = new Color(1.0f, 1.0f, 1.0f);
	public static final float[] floatBuffer1 = new float[3];
	public static final float[] floatBuffer2 = new float[3];
	public static final float[] floatBuffer3 = new float[3];

	public static Color toRGBColor(float[] hsv, Color result)
	{
		float h = hsv[0];
		float s = hsv[1];
		float v = hsv[2];

		int sector;

		float r, g, b, f, p, q, t;

		if (s == 0)
		{
			r = g = b = v;
		}
		else
		{
			h /= 60;
			sector = (int) h;
			f = h - sector;
			p = v * (1.0f - s);
			q = v * (1.0f - s * f);
			t = v * (1.0f - s * (1.0f - f));

			switch (sector)
			{
				case 0:
					r = v;
					g = t;
					b = p;
					break;
				case 1:
					r = q;
					g = v;
					b = p;
					break;
				case 2:
					r = p;
					g = v;
					b = t;
					break;
				case 3:
					r = p;
					g = q;
					b = v;
					break;
				case 4:
					r = t;
					g = p;
					b = v;
					break;
				default:
					r = v;
					g = p;
					b = q;
			}
		}

		result.r = r;
		result.g = g;
		result.b = b;

		return result;
	}

	public static float[] toHSVColor(Color color, float[] result)
	{
		float[] hsv = new float[3];
		float h = 0.0f;
		float s = 0.0f;
		float v = 0.0f;
		float min = 0.0f;
		float max = 0.0f;
		float delta = 0.0f;

		min = Math.min(color.r, color.g);
		min = Math.min(min, color.b);

		max = Math.max(color.r, color.g);
		max = Math.max(max, color.b);

		v = max;
		delta = max - min;

		if (max > 0.0f)
		{
			s = delta / max;
		}
		else
		{
			s = 0.0f;
			h = 0.0f;

			hsv[0] = h;
			hsv[1] = s;
			hsv[2] = v;

			return hsv;
		}

		if (color.r >= max)
		{
			h = (color.g - color.b) / delta;
		}
		else if (color.g >= max)
		{
			h = 2.0f + (color.b - color.r) / delta;
		}
		else
		{
			h = 4.0f + (color.r - color.g) / delta;
		}

		h *= 60.0f;

		if (h < 0.0f)
		{
			h += 360.0f;
		}

		hsv[0] = h;
		hsv[1] = s;
		hsv[2] = v;

		return hsv;
	}
}
