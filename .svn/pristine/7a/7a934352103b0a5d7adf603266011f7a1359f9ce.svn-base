package com.unlogical.colored.terrain.tile;

import java.util.Random;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Vector2;
import com.unlogical.colored.GameLauncher;
import com.unlogical.colored.audio.AudioManager.SoundType;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.terrain.TileType;
import com.unlogical.colored.terrain.property.TileProperty;
import com.unlogical.colored.util.Dimension;

public class TileSoundSource extends Tile
{
	private String soundType;
	private float volume;
	private float range;
	private int intervalMin;
	private int intervalMax;
	private int currentIntervalCooldown;
	private SoundPlayTimeType playType;
	private SoundVolumeType volumeType;
	private SoundRangeType rangeType;

	public TileSoundSource(TileType type, String metadata, int innerType, float rotation, Vector2 position, Level level, Dimension dimension, TileProperty properties, boolean allowMirrors)
	{
		super(type, metadata, innerType, rotation, position, level, dimension, properties, allowMirrors);
	}

	@Override
	public void init()
	{
		super.init();

		this.currentIntervalCooldown = (int) (this.intervalMin + Math.random() * (this.intervalMax - this.intervalMin));
	}

	@Override
	public void onUpdate(float delta, Random rng)
	{
		super.onUpdate(delta, rng);

		SoundType type = SoundType.valueOf(this.soundType);

		if (type != null)
		{
			this.level.playSound(type, this);
		}
	}

	@Override
	public void writeMetadata()
	{
		this.metadata = this.soundType + ":" + this.volume + ":" + this.range + ":" + this.intervalMin + ":" + this.intervalMax + ":" + this.playType.name() + ":" + this.volumeType.name() + ":" + this.rangeType.name();
	}

	@Override
	public void readMetadata()
	{
		String[] parts = this.metadata.split(":");

		try
		{
			this.soundType = parts[0];
			this.volume = Float.parseFloat(parts[1]);
			this.range = Float.parseFloat(parts[2]);
			this.intervalMin = Integer.parseInt(parts[3]);
			this.intervalMax = Integer.parseInt(parts[4]);
			this.playType = SoundPlayTimeType.valueOf(parts[5]);
			this.volumeType = SoundVolumeType.valueOf(parts[6]);
			this.rangeType = SoundRangeType.valueOf(parts[7]);
		}
		catch (Exception e)
		{
			this.soundType = SoundType.values()[0].name();
			this.volume = 1.0f;
			this.range = 300.0f;
			this.intervalMin = 4000;
			this.intervalMax = 6000;
			this.playType = SoundPlayTimeType.RAND_INTERVAL_AMBIENT;
			this.volumeType = SoundVolumeType.STATIC;
			this.rangeType = SoundRangeType.CIRCULAR;
		}
	}

	public void drawDebug(ShapeRenderer sr)
	{
		if (this.playType != SoundPlayTimeType.RAND_INTERVAL_AMBIENT)
		{
			sr.set(ShapeType.Line);

			float innerAlpha = 0.05f;
			float centerX = this.getCenterX();
			float centerY = this.getCenterY();

			if (this.rangeType == SoundRangeType.CIRCULAR)
			{
				sr.setColor(Color.ORANGE);
				sr.circle(centerX, centerY, this.range);

				sr.set(ShapeType.Filled);
				sr.setColor(sr.getColor().mul(1.0f, 1.0f, 1.0f, innerAlpha));
				sr.circle(centerX, centerY, this.range);
			}
			else if (this.rangeType == SoundRangeType.HORIZONTAL)
			{
				sr.setColor(Color.RED);
				sr.line(centerX - this.range, -50, centerX - this.range, GameLauncher.getHeight() + 50);
				sr.line(centerX + this.range, -50, centerX + this.range, GameLauncher.getHeight() + 50);

				sr.set(ShapeType.Filled);
				sr.setColor(sr.getColor().mul(1.0f, 1.0f, 1.0f, innerAlpha));
				sr.rect(centerX - this.range, -50, this.range * 2, GameLauncher.getHeight() + 50);
			}
			else if (this.rangeType == SoundRangeType.VERTICAL)
			{
				sr.setColor(Color.YELLOW);
				sr.line(-50, centerY - this.range, GameLauncher.getWidth() + 50, centerY - this.range);
				sr.line(-50, centerY + this.range, GameLauncher.getWidth() + 50, centerY + this.range);

				sr.set(ShapeType.Filled);
				sr.setColor(sr.getColor().mul(1.0f, 1.0f, 1.0f, innerAlpha));
				sr.rect(-50, centerY - this.range, GameLauncher.getWidth() + 50, this.range * 2);
			}
		}
	}

	@Override
	public boolean shouldUpdate()
	{
		return true;
	}

	@Override
	public boolean shouldRenderInGame()
	{
		return false;
	}

	@Override
	public boolean shouldCopy()
	{
		return false;
	}

	public String getSoundType()
	{
		return this.soundType;
	}

	public void setSoundType(String soundType)
	{
		this.soundType = soundType;
	}

	public float getVolume()
	{
		return this.volume;
	}

	public void setVolume(float volume)
	{
		this.volume = volume;
	}

	public float getRange()
	{
		return this.range;
	}

	public void setRange(float range)
	{
		this.range = range;
	}

	public int getIntervalMin()
	{
		return this.intervalMin;
	}

	public void setIntervalMin(int intervalMin)
	{
		this.intervalMin = intervalMin;
	}

	public int getIntervalMax()
	{
		return this.intervalMax;
	}

	public void setIntervalMax(int intervalMax)
	{
		this.intervalMax = intervalMax;
	}

	public SoundPlayTimeType getPlayType()
	{
		return this.playType;
	}

	public void setPlayType(SoundPlayTimeType playType)
	{
		this.playType = playType;
	}

	public SoundVolumeType getVolumeType()
	{
		return this.volumeType;
	}

	public void setVolumeType(SoundVolumeType volumeType)
	{
		this.volumeType = volumeType;
	}

	public SoundRangeType getRangeType()
	{
		return this.rangeType;
	}

	public void setRangeType(SoundRangeType rangeType)
	{
		this.rangeType = rangeType;
	}

	public enum SoundPlayTimeType
	{
		ONCE_IN_REACH, RAND_INTERVAL_IN_REACH, RAND_INTERVAL_AMBIENT;

		public static SoundPlayTimeType next(SoundPlayTimeType type)
		{
			return type.next();
		}

		public SoundPlayTimeType next()
		{
			return SoundPlayTimeType.values()[(this.ordinal() + 1) % SoundPlayTimeType.values().length];
		}
	}

	public enum SoundVolumeType
	{
		STATIC, LINEAR_DISTANCE, QUADRATIC_DISTANCE;

		public static SoundVolumeType next(SoundVolumeType type)
		{
			return type.next();
		}

		public SoundVolumeType next()
		{
			return SoundVolumeType.values()[(this.ordinal() + 1) % SoundVolumeType.values().length];
		}
	}

	public enum SoundRangeType
	{
		CIRCULAR, HORIZONTAL, VERTICAL;

		public static SoundRangeType next(SoundRangeType type)
		{
			return type.next();
		}

		public SoundRangeType next()
		{
			return SoundRangeType.values()[(this.ordinal() + 1) % SoundRangeType.values().length];
		}
	}
}
