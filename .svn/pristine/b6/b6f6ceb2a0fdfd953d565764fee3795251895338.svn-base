package com.unlogical.colored.sound;

import com.badlogic.gdx.audio.Sound;
import com.unlogical.colored.sound.SoundManager.SoundType;

public class SoundWrapper<T>
{
	private static final int DEFAULT_ALIVE_TIME = 30000;

	private T referenceObject;
	private SoundType type;
	private Sound sound;
	private float ownVolume;
	private float ownPitch;
	private long soundID;
	private boolean playing = true;
	private boolean looping;
	private int aliveTime;

	public SoundWrapper(T referenceObject, SoundType type, Sound sound, long soundID, boolean looping, float ownVolume, float ownPitch)
	{
		this.referenceObject = referenceObject;
		this.type = type;
		this.sound = sound;
		this.soundID = soundID;
		this.looping = looping;
		this.aliveTime = DEFAULT_ALIVE_TIME;
		this.ownPitch = ownPitch;
		this.ownVolume = ownVolume;
	}

	public void update(float delta)
	{
		if (playing && !looping)
		{
			this.aliveTime -= delta;
		}
	}

	public void pause()
	{
		playing = false;

		this.sound.pause(soundID);
	}

	public void resume()
	{
		playing = true;

		this.sound.resume(soundID);
	}

	public void stop()
	{
		playing = false;

		this.sound.stop(soundID);
	}

	public void setPitch(float pitch)
	{
		this.sound.setPitch(soundID, pitch);
	}

	public void setLooping(boolean looping)
	{
		this.sound.setLooping(soundID, looping);
	}

	public void setVolume(int volume)
	{
		setVolume(((float) volume) / 100.0f);
	}

	public void setVolume(float volume)
	{
		sound.setVolume(soundID, volume);
	}

	public T getReferenceObject()
	{
		return referenceObject;
	}

	public SoundType getType()
	{
		return type;
	}

	public boolean isPlaying()
	{
		return playing && !isDead();
	}

	public boolean isLooping()
	{
		return looping;
	}

	public boolean isDead()
	{
		return aliveTime <= 0;
	}
	
	public float getOwnPitch()
	{
		return ownPitch;
	}
	
	public float getOwnVolume()
	{
		return ownVolume;
	}
}
