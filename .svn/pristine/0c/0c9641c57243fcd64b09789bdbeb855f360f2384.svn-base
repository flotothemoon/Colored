package com.unlogical.colored.story;

import java.util.Map;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;

import com.unlogical.colored.entity.Entity;
import com.unlogical.colored.entity.player.EntityPlayer;
import com.unlogical.colored.entity.player.EntityScientist;
import com.unlogical.colored.level.Level;
import com.unlogical.colored.level.LevelType;
import com.unlogical.colored.levelrendering.LevelRenderer;
import com.unlogical.colored.terrain.TriggerPort;
import com.unlogical.colored.terrain.tile.Tile;
import com.unlogical.colored.terrain.tile.logical.TileLever;
import com.unlogical.colored.util.Dimension;
import com.unlogical.colored.util.TextInfo;

public class EndingStoryHandler extends CustomStoryHandler
{
	private boolean firstMachineStarted;
	
	public EndingStoryHandler(Level level)
	{
		super(level);
	}

	@Override
	public void onPreLevelInit()
	{
		level.setLevelType(LevelType.TIME_TRAVEL);
		
		level.BACKGROUND_BRIGHTNESS = level.FOREGROUND_BRIGHTNESS;
		level.setBackgroundFactor(1.0f);
		level.getDimensionColor(level.getBackgroundDimension()).a = 1.0f;
	}

	@Override
	public void onLevelInit()
	{
		level.setChapter("25");
		
		for (Entity entity : level.getEntities())
		{
			if (entity instanceof EntityScientist)
			{
				level.removeEntity(entity);
			}
		}
	}
	
	@Override
	public void onLeverPulled(TileLever lever, EntityPlayer interactor, boolean realInput)
	{
		if (TriggerPort.getColor(lever.getPort()) == Color.white)
		{
			if (interactor.getDimension() == Dimension.LIGHT)
			{
				firstMachineStarted = true;
				
				level.getStoryHandler().shatter(5.0f);
				
				level.setLevelType(LevelType.SEPERATED);
				
				for (Tile tile : LevelRenderer.getInteractableTiles())
				{
					if (tile instanceof TileLever)
					{
						if (TriggerPort.getColor(tile.getPort()) == Color.red)
						{
							((TileLever) tile).onInteract(level.getControllingPlayer());
						}
					}
				}
				
				EntityPlayer shadowPlayer = (EntityPlayer) level.getControllingPlayer().getMirroredEntity();
				EntityScientist selfAwareShadowPlayer = new EntityScientist(shadowPlayer.getPosition().copy(), level, Dimension.SHADOW, false);
				selfAwareShadowPlayer.init();
				selfAwareShadowPlayer.changeImagesTo(shadowPlayer);
				selfAwareShadowPlayer.synchronizeAnimation(shadowPlayer);
				selfAwareShadowPlayer.setVelocity(shadowPlayer.getVelocity().x, shadowPlayer.getVelocity().y);
				
				level.addEntity(selfAwareShadowPlayer);
				
				level.removeEntity(shadowPlayer);
				
				selfAwareShadowPlayer.say(new TextInfo("?", 0.2f));
				selfAwareShadowPlayer.say(new TextInfo("Where am I?"));
				selfAwareShadowPlayer.say(new TextInfo("You are trying to corrupt the world - "));
				selfAwareShadowPlayer.say(new TextInfo(" - with these machines..."));
				selfAwareShadowPlayer.say(new TextInfo("I just saw you!"));
			}
			else if (interactor.getDimension() == Dimension.SHADOW)
			{
				
			}
		}
	}
	
	@Override
	public void update(GameContainer container, int delta)
	{			
		EntityPlayer player = level.getControllingPlayer();
		EntityPlayer mirroredPlayer = (EntityPlayer) level.getControllingPlayer().getMirroredEntity();
		
		if (!mirroredPlayer.isRemoved() && mirroredPlayer.getDistanceFromSpawnpoint().length() > 30.0f && player.getHitbox().intersects(mirroredPlayer.getHitbox()))
		{			
			player.onDeath(null);
		}
	}

	@Override
	public CustomStoryHandler deepCopy(Map<Object, Object> copiedReferences)
	{
		EndingStoryHandler copy = new EndingStoryHandler((Level) Level.getCopy(this.level, copiedReferences));

		return copy;
	}
	
	@Override
	public boolean canPlayerTravelDimensions()
	{
		return false;
	}
	
	@Override
	public boolean canLeverBePulled(TileLever lever, EntityPlayer interactor)
	{
		return super.canLeverBePulled(lever, interactor);
	}

	@Override
	public boolean canPlayerExitCurrentWorld()
	{
		return false;
	}
	
	@Override
	public boolean shouldShatterWorldLikeMad()
	{
		return true;
	}
	
	@Override
	public float getShatteringMultiplier()
	{
		return firstMachineStarted ? 3.0f : 2.1f;
	}
	
	@Override
	public boolean shouldPlayerBeHandledAsShared()
	{
		return false;
	}	
	
}
