package com.unlogical.colored.gui.menu;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Rectangle;
import com.unlogical.colored.configuration.Resolutions;
import com.unlogical.colored.gui.menu.Menu.MenuItem;
import com.unlogical.colored.input.InputAction;
import com.unlogical.colored.input.InputHandler;
import com.unlogical.colored.resources.image.Images;
import com.unlogical.colored.util.Renderer;

public class MenuItemSlider extends MenuItem
{
	private boolean movingMode;

	private float padding;
	private float selectedRange;

	private Rectangle selectedSlider;
	private Rectangle fullSlider;

	private IMenuItemSliderListener listener;
	
	private float sliderWidth;
	private float sliderHeight;

	public MenuItemSlider(String item)
	{
		this(item, Resolutions.SLIDER_WIDTH, Resolutions.SLIDER_HEIGHT, Resolutions.SLIDER_PADDING);
	}

	public MenuItemSlider(String item, float sliderWidth, float sliderHeight, float padding)
	{
		super(item);

		this.padding = padding;
		this.sliderWidth = sliderWidth;
		this.sliderHeight = sliderHeight;

		createSlider();
	}

	private void createSlider()
	{
		this.fullSlider = new Rectangle(centerX - sliderWidth / 2, centerY - sliderHeight / 2, sliderWidth, sliderHeight);
		this.selectedSlider = new Rectangle(fullSlider.x, fullSlider.y, fullSlider.width * selectedRange, fullSlider.height);
	}

	private void updateSliders()
	{
		this.fullSlider.x = centerX - sliderWidth / 2;
		this.fullSlider.y = centerY - sliderHeight / 2;
		this.fullSlider.width = sliderWidth;
		this.fullSlider.height = sliderHeight;

		this.selectedSlider.x = centerX - sliderWidth / 2;
		this.selectedSlider.y = centerY - sliderHeight / 2;
		this.selectedSlider.width = selectedRange * sliderWidth;
		this.selectedSlider.height = sliderHeight;
	}

	@Override
	public void update(boolean selected, float delta)
	{
		if (fullSlider.contains(InputHandler.getCurrentInputX(), InputHandler.getCurrentInputY()))
		{
			if (Gdx.input.isButtonPressed(Input.Buttons.LEFT))
			{
				movingMode = true;
			}
		}
		else if (!Gdx.input.isButtonPressed(Input.Buttons.LEFT))
		{
			movingMode = false;
		}

		if (!selected)
		{
			movingMode = false;
		}

		float beforeSelectedRange = selectedRange;

		if (movingMode)
		{
			if (Gdx.input.isButtonPressed(Input.Buttons.LEFT))
			{
				selectedRange = (InputHandler.getCurrentInputX() - fullSlider.getX()) / sliderWidth;
			}
		}

		if (selected)
		{
			if (InputHandler.isKeyPressed(InputAction.MOVE_LEFT))
			{
				selectedRange -= 0.00075f * delta;
			}
			else if (InputHandler.isKeyPressed(InputAction.MOVE_RIGHT))
			{
				selectedRange += 0.00075f * delta;
			}
		}

		if (selectedRange < 0.0f)
		{
			selectedRange = 0.0f;
		}
		else if (selectedRange > 1.0f)
		{
			selectedRange = 1.0f;
		}

		if (beforeSelectedRange != selectedRange)
		{
			onFactorChanged(selectedRange);
		}

		updateSliders();
	}

	@Override
	public void render(Color color, Batch batch)
	{
		Renderer.useSpriteBatch();

		Images.draw(item, centerX, centerY - padding - Images.getHandler(item).getImage().getRegionWidth(), scale, 0.0f, color, batch);

		ShapeRenderer sr = Renderer.useShapeRenderer();

		sr.set(ShapeType.Filled);

		sr.setColor(0.8f, 0.8f, 0.8f, color.a);

		sr.rect(fullSlider.x, fullSlider.y, fullSlider.width, fullSlider.height);

		sr.setColor(1.0f, 1.0f, 1.0f, color.a);
		sr.rect(selectedSlider.x, selectedSlider.y, selectedSlider.width, selectedSlider.height);
	}

	public void onFactorChanged(float selectedRange)
	{
		if (listener != null)
		{
			listener.onFactorChanged(selectedRange);
		}
	}

	@Override
	public float getWidth()
	{
		return Math.max(sliderWidth, super.getWidth());
	}

	@Override
	public float getHeight()
	{
		return super.getHeight() + padding * 2 + sliderHeight;
	}

	public void setSelectedRange(float selectedRange)
	{
		this.selectedRange = selectedRange;

		onFactorChanged(selectedRange);
	}

	public float getSelectedRange()
	{
		return selectedRange;
	}
	
	public interface IMenuItemSliderListener
	{
		public void onFactorChanged(float selectedRange);
	}
	
	public void setListener(IMenuItemSliderListener listener)
	{
		this.listener = listener;
	}
}
