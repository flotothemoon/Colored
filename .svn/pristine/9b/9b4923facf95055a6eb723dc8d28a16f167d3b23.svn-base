package com.unlogical.colored.filesystem.files;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.unlogical.colored.filesystem.FilePaths;

public class YAMLConfiguration
{
	private File file;

	public YAMLConfiguration(File file)
	{
		this.file = file;
	}

	public void set(String key, String value)
	{
		boolean found = false;

		List<String> lineList = new ArrayList<String>();

		try
		{
			lineList = readConfig(file);
			for (int i = 0; i < lineList.size(); i++)
			{
				if (lineList.get(i).startsWith(key))
				{
					found = true;
					lineList.set(i, key + ": " + value);
				}
			}

			if (!found)
			{
				lineList.add(key + ": " + value);
			}

			writeConfig(file.getPath(), lineList);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public String get(String key)
	{
		String ret = null;

		try
		{
			List<String> lines = readConfig(file);
			for (String line : lines)
			{
				if (line.startsWith(key))
				{
					ret = line.substring(key.length() + 2);
				}
			}
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}

		return ret;
	}

	public HashMap<String, String> getLines(String ref)
	{
		HashMap<String, String> seperatedLines = new HashMap<String, String>();
		List<String> lines = new ArrayList<String>();
		
		try
		{
			lines = readConfig(FilePaths.getFile(ref));
		}
		catch (IOException e)
		{
		}
		
		for (String line : lines)
		{
			String key = line.substring(0, line.indexOf(':'));
			String value = line.substring(line.indexOf(':') + 2);

			seperatedLines.put(key, value);
		}

		return seperatedLines;
	}

	public HashMap<String, String> getLines()
	{
		return getLines(this.file.getPath());
	}

	private List<String> readConfig(File file) throws IOException
	{
		List<String> lines = new ArrayList<String>();
		lines.addAll(Files.readAllLines(file.toPath(), Charset.forName("UTF8")));

		return lines;
	}

	private void writeConfig(String fileName, List<String> aLines) throws IOException
	{
		BufferedWriter writer = new BufferedWriter(new FileWriter(file));

		for (String line : aLines)
		{
			writer.write(line);
			writer.newLine();
		}

		writer.close();
	}

	public boolean existsFile()
	{
		return file.exists();
	}
}
