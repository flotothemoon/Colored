package com.unlogical.linked.entity.projectile;

import java.util.Map;
import java.util.Random;

import org.newdawn.slick.GameContainer;
import org.newdawn.slick.geom.Vector2f;

import com.unlogical.linked.entity.Entity;
import com.unlogical.linked.entity.EntityType;
import com.unlogical.linked.entity.boss.EntityBoss;
import com.unlogical.linked.entity.property.EntityProperty;
import com.unlogical.linked.entity.property.SharedEntityProperties;
import com.unlogical.linked.level.Level;
import com.unlogical.linked.terrain.tile.Tile;
import com.unlogical.linked.util.Dimension;
import com.unlogical.linked.util.LevelObject;

public class EntityShadowBall extends EntityProjectile
{
	private boolean gravityAffected;
	
	public EntityShadowBall(EntityType type, Vector2f position, Level level, Dimension dimension, boolean allowMirrors)
	{
		super(type, position, level, dimension, allowMirrors);
	}

	@Override
	public LevelObject deepCopy(Map<Object, Object> copiedReferences)
	{
		EntityShadowBall copy = (EntityShadowBall) super.deepCopy(copiedReferences);
		
		copy.gravityAffected = this.gravityAffected;
		
		return copy;
	}
	
	@Override
	public void onUpdate(GameContainer container, float delta, Random rng)
	{
		super.onUpdate(container, delta, rng);
		
//		if (gravityAffected)
//		{
//			float beforeCenterX = this.getCenterX();
//			float beforeCenterY = this.getCenterY();
//			
//			this.hitbox.setRotation((float) this.velocity.getTheta(), this.hitbox.getCenterX() - this.hitbox.getMinX(), this.hitbox.getCenterY() - this.hitbox.getMinY());
//			this.setRotation((float) this.velocity.getTheta());
//			
//			this.hitbox.setCenterX(beforeCenterX);
//			this.hitbox.setCenterY(beforeCenterY);
//		}
	}	
	
	@Override
	public boolean onCollisionWithEntity(Entity entity, boolean top, boolean bottom, boolean right, boolean left)
	{
		if (entity instanceof EntityShadowBall)
		{
			this.onDeath(entity);
			
			((EntityShadowBall) entity).onDeath(this);
		}	
		
		return this.alive;
	}
	
	@Override
	public void onCollisionWithTile(Tile tile, boolean top, boolean bottom, boolean right, boolean left, boolean intersect)
	{
		if (!intersect)
		{			
			this.onDeath(tile);
		}
	}
	
	@Override
	protected void onCloseMoveToBlockAbove(float distance)
	{
		this.onDeath(null);
	}
	
	@Override
	protected void onCloseMoveToBlockBelow(Tile nextTile, float distanceToBlockBelow)
	{
		this.onDeath(nextTile);
	}
	
	@Override
	protected void onCloseMoveToBlockLeft(float distance)
	{
		this.onDeath(null);
	}
	
	@Override
	protected void onCloseMoveToBlockRight(float distance)
	{
		this.onDeath(null);
	}

	@Override
	protected void customOnDeath(LevelObject damageSource)
	{
		resetVelocities();
		
		if (!reversing)
		{
			transformToPixels(null, PIXELIFIED_PARTICLE_SIZE);
		}
	}
	
	@Override
	protected boolean canBeKilled(LevelObject damageSource)
	{
		return !frozen || damageSource instanceof EntityBoss;
	}
	
	@Override
	protected boolean isGravityAffected()
	{
		return gravityAffected;
	}
	
	public void setGravityAffected(boolean gravityAffected)
	{
		this.gravityAffected = gravityAffected;
	}
	
	@Override
	protected EntityProperty getEntityProperty()
	{
		return SharedEntityProperties.SHADOW_BALL;
	}
}
